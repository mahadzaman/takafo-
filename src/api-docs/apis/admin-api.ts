/* tslint:disable */
/* eslint-disable */
/**
 * Takafo+
 * The Takafo API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CreateRoleDTO } from '../models';
// @ts-ignore
import type { CreateRolePermissionDTO } from '../models';
// @ts-ignore
import type { CreateSettingDTO } from '../models';
// @ts-ignore
import type { CreateUserDTO } from '../models';
// @ts-ignore
import type { UpdatePermissionDto } from '../models';
// @ts-ignore
import type { UpdateRoleDTO } from '../models';
// @ts-ignore
import type { UpdateSettingDTO } from '../models';
// @ts-ignore
import type { UpdateStatusDTO } from '../models';
// @ts-ignore
import type { UpdateUserRoleDTO } from '../models';
/**
 * AdminApi - axios parameter creator
 * @export
 */
export const AdminApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary This enpoint will assign permissions to role
         * @param {string} roleId 
         * @param {CreateRolePermissionDTO} createRolePermissionDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerAssignPermission: async (roleId: string, createRolePermissionDTO: CreateRolePermissionDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roleId' is not null or undefined
            assertParamExists('adminControllerAssignPermission', 'roleId', roleId)
            // verify required parameter 'createRolePermissionDTO' is not null or undefined
            assertParamExists('adminControllerAssignPermission', 'createRolePermissionDTO', createRolePermissionDTO)
            const localVarPath = `/v1/admin/role-permission/{role_id}/permissions`
                .replace(`{${"role_id"}}`, encodeURIComponent(String(roleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createRolePermissionDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} identifier Resource Identifier
         * @param {string} label Name for the resource
         * @param {number} sortIndex Index for sorting resources
         * @param {string} route Route for the resource
         * @param {Array<string>} rolesId Array of role IDs associated with the resource
         * @param {string} [description] Description for the resource
         * @param {boolean} [isParent] Indicates if this resource is a parent resource
         * @param {boolean} [menuChild] Indicates if this resource is a menu child
         * @param {boolean} [interfaceChild] Indicates if this resource is an interface child
         * @param {File} [icon] Icon file associated with the resource
         * @param {File} [activeIcon] Active icon file associated with the resource
         * @param {string} [parentId] ID of the parent resource if this resource is a child
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerCreateResource: async (identifier: string, label: string, sortIndex: number, route: string, rolesId: Array<string>, description?: string, isParent?: boolean, menuChild?: boolean, interfaceChild?: boolean, icon?: File, activeIcon?: File, parentId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            assertParamExists('adminControllerCreateResource', 'identifier', identifier)
            // verify required parameter 'label' is not null or undefined
            assertParamExists('adminControllerCreateResource', 'label', label)
            // verify required parameter 'sortIndex' is not null or undefined
            assertParamExists('adminControllerCreateResource', 'sortIndex', sortIndex)
            // verify required parameter 'route' is not null or undefined
            assertParamExists('adminControllerCreateResource', 'route', route)
            // verify required parameter 'rolesId' is not null or undefined
            assertParamExists('adminControllerCreateResource', 'rolesId', rolesId)
            const localVarPath = `/v1/admin/resources`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (identifier !== undefined) { 
                localVarFormParams.append('identifier', identifier as any);
            }
    
            if (label !== undefined) { 
                localVarFormParams.append('label', label as any);
            }
    
            if (description !== undefined) { 
                localVarFormParams.append('description', description as any);
            }
    
            if (isParent !== undefined) { 
                localVarFormParams.append('is_parent', String(isParent) as any);
            }
    
            if (menuChild !== undefined) { 
                localVarFormParams.append('menu_child', String(menuChild) as any);
            }
    
            if (interfaceChild !== undefined) { 
                localVarFormParams.append('interface_child', String(interfaceChild) as any);
            }
    
            if (sortIndex !== undefined) { 
                localVarFormParams.append('sort_index', sortIndex as any);
            }
    
            if (route !== undefined) { 
                localVarFormParams.append('route', route as any);
            }
    
            if (icon !== undefined) { 
                localVarFormParams.append('icon', icon as any);
            }
    
            if (activeIcon !== undefined) { 
                localVarFormParams.append('active_icon', activeIcon as any);
            }
    
            if (parentId !== undefined) { 
                localVarFormParams.append('parent_id', parentId as any);
            }
                if (rolesId) {
                localVarFormParams.append('roles_id', rolesId.join(COLLECTION_FORMATS.csv));
            }

    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateRoleDTO} createRoleDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerCreateRole: async (createRoleDTO: CreateRoleDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createRoleDTO' is not null or undefined
            assertParamExists('adminControllerCreateRole', 'createRoleDTO', createRoleDTO)
            const localVarPath = `/v1/admin/roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createRoleDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new setting
         * @param {CreateSettingDTO} createSettingDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerCreateSetting: async (createSettingDTO: CreateSettingDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createSettingDTO' is not null or undefined
            assertParamExists('adminControllerCreateSetting', 'createSettingDTO', createSettingDTO)
            const localVarPath = `/v1/admin/settings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createSettingDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateUserDTO} createUserDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerCreateUserswithRole: async (createUserDTO: CreateUserDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createUserDTO' is not null or undefined
            assertParamExists('adminControllerCreateUserswithRole', 'createUserDTO', createUserDTO)
            const localVarPath = `/v1/admin/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createUserDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerDeleteResource: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('adminControllerDeleteResource', 'id', id)
            const localVarPath = `/v1/admin/resources/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerDeleteRole: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('adminControllerDeleteRole', 'id', id)
            const localVarPath = `/v1/admin/roles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary It will delete the setting
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerDeleteSettings: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('adminControllerDeleteSettings', 'id', id)
            const localVarPath = `/v1/admin/settings/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {boolean} [isParent] Filter resources by is_parent (true/false)
         * @param {boolean} [menuChild] Filter resources by menu_child (true/false)
         * @param {boolean} [interfaceChild] Filter resources by interface_child (true/false)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerFindAllResources: async (isParent?: boolean, menuChild?: boolean, interfaceChild?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/admin/resources`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (isParent !== undefined) {
                localVarQueryParameter['is_parent'] = isParent;
            }

            if (menuChild !== undefined) {
                localVarQueryParameter['menu_child'] = menuChild;
            }

            if (interfaceChild !== undefined) {
                localVarQueryParameter['interface_child'] = interfaceChild;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerFindAllRoles: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/admin/roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerFindOneResource: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('adminControllerFindOneResource', 'id', id)
            const localVarPath = `/v1/admin/resources/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerFindOneRole: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('adminControllerFindOneRole', 'id', id)
            const localVarPath = `/v1/admin/roles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary This enpoint will fetch permissions of role on specific resource on the basis of role_id and resource_id
         * @param {string} roleId 
         * @param {string} resourceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerFindPermissionsOfResource: async (roleId: string, resourceId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roleId' is not null or undefined
            assertParamExists('adminControllerFindPermissionsOfResource', 'roleId', roleId)
            // verify required parameter 'resourceId' is not null or undefined
            assertParamExists('adminControllerFindPermissionsOfResource', 'resourceId', resourceId)
            const localVarPath = `/v1/admin/role-permission/{role_id}/{resource_id}`
                .replace(`{${"role_id"}}`, encodeURIComponent(String(roleId)))
                .replace(`{${"resource_id"}}`, encodeURIComponent(String(resourceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary This enpoint will fetch permissions assigned to role
         * @param {string} roleId 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerFindPermissionsToRole: async (roleId: string, limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roleId' is not null or undefined
            assertParamExists('adminControllerFindPermissionsToRole', 'roleId', roleId)
            const localVarPath = `/v1/admin/role-permission/{role_id}/permissions`
                .replace(`{${"role_id"}}`, encodeURIComponent(String(roleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get user roles by user ID
         * @param {string} userId ID of the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerFindUserRoles: async (userId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('adminControllerFindUserRoles', 'userId', userId)
            const localVarPath = `/v1/admin/user/{user_id}/roles`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Fetch list of all setting
         * @param {number} limit 
         * @param {number} offset 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetAllSettings: async (limit: number, offset: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'limit' is not null or undefined
            assertParamExists('adminControllerGetAllSettings', 'limit', limit)
            // verify required parameter 'offset' is not null or undefined
            assertParamExists('adminControllerGetAllSettings', 'offset', offset)
            const localVarPath = `/v1/admin/settings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetParentAndChildResourcesByRole: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/admin/resources/parent/children`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Fetch a setting by ID
         * @param {string} id UUID of the setting
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetSettingById: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('adminControllerGetSettingById', 'id', id)
            const localVarPath = `/v1/admin/settings/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Fetch list of all setting by category
         * @param {number} limit 
         * @param {number} offset 
         * @param {string} category 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetSettingsByCategory: async (limit: number, offset: number, category: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'limit' is not null or undefined
            assertParamExists('adminControllerGetSettingsByCategory', 'limit', limit)
            // verify required parameter 'offset' is not null or undefined
            assertParamExists('adminControllerGetSettingsByCategory', 'offset', offset)
            // verify required parameter 'category' is not null or undefined
            assertParamExists('adminControllerGetSettingsByCategory', 'category', category)
            const localVarPath = `/v1/admin/settings/category/{category}`
                .replace(`{${"category"}}`, encodeURIComponent(String(category)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary It will update the setting status
         * @param {string} id 
         * @param {UpdateStatusDTO} updateStatusDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerSwitchSettingStatus: async (id: string, updateStatusDTO: UpdateStatusDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('adminControllerSwitchSettingStatus', 'id', id)
            // verify required parameter 'updateStatusDTO' is not null or undefined
            assertParamExists('adminControllerSwitchSettingStatus', 'updateStatusDTO', updateStatusDTO)
            const localVarPath = `/v1/admin/settings/status/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateStatusDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary This enpoint will update permissions to role on specific resource on the basis of role_id and resource_id
         * @param {string} roleId 
         * @param {string} resourceId 
         * @param {UpdatePermissionDto} updatePermissionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerUpdatePermission: async (roleId: string, resourceId: string, updatePermissionDto: UpdatePermissionDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roleId' is not null or undefined
            assertParamExists('adminControllerUpdatePermission', 'roleId', roleId)
            // verify required parameter 'resourceId' is not null or undefined
            assertParamExists('adminControllerUpdatePermission', 'resourceId', resourceId)
            // verify required parameter 'updatePermissionDto' is not null or undefined
            assertParamExists('adminControllerUpdatePermission', 'updatePermissionDto', updatePermissionDto)
            const localVarPath = `/v1/admin/role-permission/{role_id}/{resource_id}`
                .replace(`{${"role_id"}}`, encodeURIComponent(String(roleId)))
                .replace(`{${"resource_id"}}`, encodeURIComponent(String(resourceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updatePermissionDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [identifier] Resource Identifier
         * @param {string} [label] Name for the resource
         * @param {string} [description] Description for the resource
         * @param {boolean} [isParent] Indicates if this resource is a parent resource
         * @param {boolean} [menuChild] Indicates if this resource is a menu child
         * @param {boolean} [interfaceChild] Indicates if this resource is an interface child
         * @param {number} [sortIndex] Index for sorting resources
         * @param {string} [route] Route for the resource
         * @param {File} [icon] Icon file associated with the resource
         * @param {File} [activeIcon] Active icon file associated with the resource
         * @param {string} [parentId] ID of the parent resource if this resource is a child
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerUpdateResource: async (id: string, identifier?: string, label?: string, description?: string, isParent?: boolean, menuChild?: boolean, interfaceChild?: boolean, sortIndex?: number, route?: string, icon?: File, activeIcon?: File, parentId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('adminControllerUpdateResource', 'id', id)
            const localVarPath = `/v1/admin/resources/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (identifier !== undefined) { 
                localVarFormParams.append('identifier', identifier as any);
            }
    
            if (label !== undefined) { 
                localVarFormParams.append('label', label as any);
            }
    
            if (description !== undefined) { 
                localVarFormParams.append('description', description as any);
            }
    
            if (isParent !== undefined) { 
                localVarFormParams.append('is_parent', String(isParent) as any);
            }
    
            if (menuChild !== undefined) { 
                localVarFormParams.append('menu_child', String(menuChild) as any);
            }
    
            if (interfaceChild !== undefined) { 
                localVarFormParams.append('interface_child', String(interfaceChild) as any);
            }
    
            if (sortIndex !== undefined) { 
                localVarFormParams.append('sort_index', sortIndex as any);
            }
    
            if (route !== undefined) { 
                localVarFormParams.append('route', route as any);
            }
    
            if (icon !== undefined) { 
                localVarFormParams.append('icon', icon as any);
            }
    
            if (activeIcon !== undefined) { 
                localVarFormParams.append('active_icon', activeIcon as any);
            }
    
            if (parentId !== undefined) { 
                localVarFormParams.append('parent_id', parentId as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateRoleDTO} updateRoleDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerUpdateRole: async (id: string, updateRoleDTO: UpdateRoleDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('adminControllerUpdateRole', 'id', id)
            // verify required parameter 'updateRoleDTO' is not null or undefined
            assertParamExists('adminControllerUpdateRole', 'updateRoleDTO', updateRoleDTO)
            const localVarPath = `/v1/admin/roles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateRoleDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary It will update the setting
         * @param {string} id 
         * @param {UpdateSettingDTO} updateSettingDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerUpdateSettings: async (id: string, updateSettingDTO: UpdateSettingDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('adminControllerUpdateSettings', 'id', id)
            // verify required parameter 'updateSettingDTO' is not null or undefined
            assertParamExists('adminControllerUpdateSettings', 'updateSettingDTO', updateSettingDTO)
            const localVarPath = `/v1/admin/settings/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateSettingDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary This enpoint will Update user roles
         * @param {string} userId ID of the user to update roles for
         * @param {UpdateUserRoleDTO} updateUserRoleDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerUpdateUserRoles: async (userId: string, updateUserRoleDTO: UpdateUserRoleDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('adminControllerUpdateUserRoles', 'userId', userId)
            // verify required parameter 'updateUserRoleDTO' is not null or undefined
            assertParamExists('adminControllerUpdateUserRoles', 'updateUserRoleDTO', updateUserRoleDTO)
            const localVarPath = `/v1/admin/user/{user_id}/roles`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateUserRoleDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdminApi - functional programming interface
 * @export
 */
export const AdminApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AdminApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary This enpoint will assign permissions to role
         * @param {string} roleId 
         * @param {CreateRolePermissionDTO} createRolePermissionDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerAssignPermission(roleId: string, createRolePermissionDTO: CreateRolePermissionDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerAssignPermission(roleId, createRolePermissionDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerAssignPermission']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} identifier Resource Identifier
         * @param {string} label Name for the resource
         * @param {number} sortIndex Index for sorting resources
         * @param {string} route Route for the resource
         * @param {Array<string>} rolesId Array of role IDs associated with the resource
         * @param {string} [description] Description for the resource
         * @param {boolean} [isParent] Indicates if this resource is a parent resource
         * @param {boolean} [menuChild] Indicates if this resource is a menu child
         * @param {boolean} [interfaceChild] Indicates if this resource is an interface child
         * @param {File} [icon] Icon file associated with the resource
         * @param {File} [activeIcon] Active icon file associated with the resource
         * @param {string} [parentId] ID of the parent resource if this resource is a child
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerCreateResource(identifier: string, label: string, sortIndex: number, route: string, rolesId: Array<string>, description?: string, isParent?: boolean, menuChild?: boolean, interfaceChild?: boolean, icon?: File, activeIcon?: File, parentId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerCreateResource(identifier, label, sortIndex, route, rolesId, description, isParent, menuChild, interfaceChild, icon, activeIcon, parentId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerCreateResource']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreateRoleDTO} createRoleDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerCreateRole(createRoleDTO: CreateRoleDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerCreateRole(createRoleDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerCreateRole']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create a new setting
         * @param {CreateSettingDTO} createSettingDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerCreateSetting(createSettingDTO: CreateSettingDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerCreateSetting(createSettingDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerCreateSetting']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreateUserDTO} createUserDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerCreateUserswithRole(createUserDTO: CreateUserDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerCreateUserswithRole(createUserDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerCreateUserswithRole']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerDeleteResource(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerDeleteResource(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerDeleteResource']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerDeleteRole(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerDeleteRole(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerDeleteRole']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary It will delete the setting
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerDeleteSettings(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerDeleteSettings(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerDeleteSettings']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {boolean} [isParent] Filter resources by is_parent (true/false)
         * @param {boolean} [menuChild] Filter resources by menu_child (true/false)
         * @param {boolean} [interfaceChild] Filter resources by interface_child (true/false)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerFindAllResources(isParent?: boolean, menuChild?: boolean, interfaceChild?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerFindAllResources(isParent, menuChild, interfaceChild, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerFindAllResources']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerFindAllRoles(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerFindAllRoles(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerFindAllRoles']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerFindOneResource(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerFindOneResource(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerFindOneResource']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerFindOneRole(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerFindOneRole(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerFindOneRole']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary This enpoint will fetch permissions of role on specific resource on the basis of role_id and resource_id
         * @param {string} roleId 
         * @param {string} resourceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerFindPermissionsOfResource(roleId: string, resourceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerFindPermissionsOfResource(roleId, resourceId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerFindPermissionsOfResource']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary This enpoint will fetch permissions assigned to role
         * @param {string} roleId 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerFindPermissionsToRole(roleId: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerFindPermissionsToRole(roleId, limit, offset, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerFindPermissionsToRole']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get user roles by user ID
         * @param {string} userId ID of the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerFindUserRoles(userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerFindUserRoles(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerFindUserRoles']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Fetch list of all setting
         * @param {number} limit 
         * @param {number} offset 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerGetAllSettings(limit: number, offset: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerGetAllSettings(limit, offset, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerGetAllSettings']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerGetParentAndChildResourcesByRole(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerGetParentAndChildResourcesByRole(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerGetParentAndChildResourcesByRole']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Fetch a setting by ID
         * @param {string} id UUID of the setting
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerGetSettingById(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerGetSettingById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerGetSettingById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Fetch list of all setting by category
         * @param {number} limit 
         * @param {number} offset 
         * @param {string} category 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerGetSettingsByCategory(limit: number, offset: number, category: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerGetSettingsByCategory(limit, offset, category, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerGetSettingsByCategory']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary It will update the setting status
         * @param {string} id 
         * @param {UpdateStatusDTO} updateStatusDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerSwitchSettingStatus(id: string, updateStatusDTO: UpdateStatusDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerSwitchSettingStatus(id, updateStatusDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerSwitchSettingStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary This enpoint will update permissions to role on specific resource on the basis of role_id and resource_id
         * @param {string} roleId 
         * @param {string} resourceId 
         * @param {UpdatePermissionDto} updatePermissionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerUpdatePermission(roleId: string, resourceId: string, updatePermissionDto: UpdatePermissionDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerUpdatePermission(roleId, resourceId, updatePermissionDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerUpdatePermission']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [identifier] Resource Identifier
         * @param {string} [label] Name for the resource
         * @param {string} [description] Description for the resource
         * @param {boolean} [isParent] Indicates if this resource is a parent resource
         * @param {boolean} [menuChild] Indicates if this resource is a menu child
         * @param {boolean} [interfaceChild] Indicates if this resource is an interface child
         * @param {number} [sortIndex] Index for sorting resources
         * @param {string} [route] Route for the resource
         * @param {File} [icon] Icon file associated with the resource
         * @param {File} [activeIcon] Active icon file associated with the resource
         * @param {string} [parentId] ID of the parent resource if this resource is a child
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerUpdateResource(id: string, identifier?: string, label?: string, description?: string, isParent?: boolean, menuChild?: boolean, interfaceChild?: boolean, sortIndex?: number, route?: string, icon?: File, activeIcon?: File, parentId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerUpdateResource(id, identifier, label, description, isParent, menuChild, interfaceChild, sortIndex, route, icon, activeIcon, parentId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerUpdateResource']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateRoleDTO} updateRoleDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerUpdateRole(id: string, updateRoleDTO: UpdateRoleDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerUpdateRole(id, updateRoleDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerUpdateRole']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary It will update the setting
         * @param {string} id 
         * @param {UpdateSettingDTO} updateSettingDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerUpdateSettings(id: string, updateSettingDTO: UpdateSettingDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerUpdateSettings(id, updateSettingDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerUpdateSettings']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary This enpoint will Update user roles
         * @param {string} userId ID of the user to update roles for
         * @param {UpdateUserRoleDTO} updateUserRoleDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerUpdateUserRoles(userId: string, updateUserRoleDTO: UpdateUserRoleDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerUpdateUserRoles(userId, updateUserRoleDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerUpdateUserRoles']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AdminApi - factory interface
 * @export
 */
export const AdminApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AdminApiFp(configuration)
    return {
        /**
         * 
         * @summary This enpoint will assign permissions to role
         * @param {string} roleId 
         * @param {CreateRolePermissionDTO} createRolePermissionDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerAssignPermission(roleId: string, createRolePermissionDTO: CreateRolePermissionDTO, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminControllerAssignPermission(roleId, createRolePermissionDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} identifier Resource Identifier
         * @param {string} label Name for the resource
         * @param {number} sortIndex Index for sorting resources
         * @param {string} route Route for the resource
         * @param {Array<string>} rolesId Array of role IDs associated with the resource
         * @param {string} [description] Description for the resource
         * @param {boolean} [isParent] Indicates if this resource is a parent resource
         * @param {boolean} [menuChild] Indicates if this resource is a menu child
         * @param {boolean} [interfaceChild] Indicates if this resource is an interface child
         * @param {File} [icon] Icon file associated with the resource
         * @param {File} [activeIcon] Active icon file associated with the resource
         * @param {string} [parentId] ID of the parent resource if this resource is a child
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerCreateResource(identifier: string, label: string, sortIndex: number, route: string, rolesId: Array<string>, description?: string, isParent?: boolean, menuChild?: boolean, interfaceChild?: boolean, icon?: File, activeIcon?: File, parentId?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminControllerCreateResource(identifier, label, sortIndex, route, rolesId, description, isParent, menuChild, interfaceChild, icon, activeIcon, parentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateRoleDTO} createRoleDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerCreateRole(createRoleDTO: CreateRoleDTO, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminControllerCreateRole(createRoleDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a new setting
         * @param {CreateSettingDTO} createSettingDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerCreateSetting(createSettingDTO: CreateSettingDTO, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminControllerCreateSetting(createSettingDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateUserDTO} createUserDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerCreateUserswithRole(createUserDTO: CreateUserDTO, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminControllerCreateUserswithRole(createUserDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerDeleteResource(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminControllerDeleteResource(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerDeleteRole(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminControllerDeleteRole(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary It will delete the setting
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerDeleteSettings(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminControllerDeleteSettings(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {boolean} [isParent] Filter resources by is_parent (true/false)
         * @param {boolean} [menuChild] Filter resources by menu_child (true/false)
         * @param {boolean} [interfaceChild] Filter resources by interface_child (true/false)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerFindAllResources(isParent?: boolean, menuChild?: boolean, interfaceChild?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminControllerFindAllResources(isParent, menuChild, interfaceChild, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerFindAllRoles(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminControllerFindAllRoles(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerFindOneResource(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminControllerFindOneResource(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerFindOneRole(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminControllerFindOneRole(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary This enpoint will fetch permissions of role on specific resource on the basis of role_id and resource_id
         * @param {string} roleId 
         * @param {string} resourceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerFindPermissionsOfResource(roleId: string, resourceId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminControllerFindPermissionsOfResource(roleId, resourceId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary This enpoint will fetch permissions assigned to role
         * @param {string} roleId 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerFindPermissionsToRole(roleId: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminControllerFindPermissionsToRole(roleId, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get user roles by user ID
         * @param {string} userId ID of the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerFindUserRoles(userId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminControllerFindUserRoles(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Fetch list of all setting
         * @param {number} limit 
         * @param {number} offset 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetAllSettings(limit: number, offset: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminControllerGetAllSettings(limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetParentAndChildResourcesByRole(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminControllerGetParentAndChildResourcesByRole(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Fetch a setting by ID
         * @param {string} id UUID of the setting
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetSettingById(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminControllerGetSettingById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Fetch list of all setting by category
         * @param {number} limit 
         * @param {number} offset 
         * @param {string} category 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetSettingsByCategory(limit: number, offset: number, category: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminControllerGetSettingsByCategory(limit, offset, category, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary It will update the setting status
         * @param {string} id 
         * @param {UpdateStatusDTO} updateStatusDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerSwitchSettingStatus(id: string, updateStatusDTO: UpdateStatusDTO, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminControllerSwitchSettingStatus(id, updateStatusDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary This enpoint will update permissions to role on specific resource on the basis of role_id and resource_id
         * @param {string} roleId 
         * @param {string} resourceId 
         * @param {UpdatePermissionDto} updatePermissionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerUpdatePermission(roleId: string, resourceId: string, updatePermissionDto: UpdatePermissionDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminControllerUpdatePermission(roleId, resourceId, updatePermissionDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [identifier] Resource Identifier
         * @param {string} [label] Name for the resource
         * @param {string} [description] Description for the resource
         * @param {boolean} [isParent] Indicates if this resource is a parent resource
         * @param {boolean} [menuChild] Indicates if this resource is a menu child
         * @param {boolean} [interfaceChild] Indicates if this resource is an interface child
         * @param {number} [sortIndex] Index for sorting resources
         * @param {string} [route] Route for the resource
         * @param {File} [icon] Icon file associated with the resource
         * @param {File} [activeIcon] Active icon file associated with the resource
         * @param {string} [parentId] ID of the parent resource if this resource is a child
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerUpdateResource(id: string, identifier?: string, label?: string, description?: string, isParent?: boolean, menuChild?: boolean, interfaceChild?: boolean, sortIndex?: number, route?: string, icon?: File, activeIcon?: File, parentId?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminControllerUpdateResource(id, identifier, label, description, isParent, menuChild, interfaceChild, sortIndex, route, icon, activeIcon, parentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateRoleDTO} updateRoleDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerUpdateRole(id: string, updateRoleDTO: UpdateRoleDTO, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminControllerUpdateRole(id, updateRoleDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary It will update the setting
         * @param {string} id 
         * @param {UpdateSettingDTO} updateSettingDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerUpdateSettings(id: string, updateSettingDTO: UpdateSettingDTO, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminControllerUpdateSettings(id, updateSettingDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary This enpoint will Update user roles
         * @param {string} userId ID of the user to update roles for
         * @param {UpdateUserRoleDTO} updateUserRoleDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerUpdateUserRoles(userId: string, updateUserRoleDTO: UpdateUserRoleDTO, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminControllerUpdateUserRoles(userId, updateUserRoleDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AdminApi - object-oriented interface
 * @export
 * @class AdminApi
 * @extends {BaseAPI}
 */
export class AdminApi extends BaseAPI {
    /**
     * 
     * @summary This enpoint will assign permissions to role
     * @param {string} roleId 
     * @param {CreateRolePermissionDTO} createRolePermissionDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public adminControllerAssignPermission(roleId: string, createRolePermissionDTO: CreateRolePermissionDTO, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerAssignPermission(roleId, createRolePermissionDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} identifier Resource Identifier
     * @param {string} label Name for the resource
     * @param {number} sortIndex Index for sorting resources
     * @param {string} route Route for the resource
     * @param {Array<string>} rolesId Array of role IDs associated with the resource
     * @param {string} [description] Description for the resource
     * @param {boolean} [isParent] Indicates if this resource is a parent resource
     * @param {boolean} [menuChild] Indicates if this resource is a menu child
     * @param {boolean} [interfaceChild] Indicates if this resource is an interface child
     * @param {File} [icon] Icon file associated with the resource
     * @param {File} [activeIcon] Active icon file associated with the resource
     * @param {string} [parentId] ID of the parent resource if this resource is a child
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public adminControllerCreateResource(identifier: string, label: string, sortIndex: number, route: string, rolesId: Array<string>, description?: string, isParent?: boolean, menuChild?: boolean, interfaceChild?: boolean, icon?: File, activeIcon?: File, parentId?: string, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerCreateResource(identifier, label, sortIndex, route, rolesId, description, isParent, menuChild, interfaceChild, icon, activeIcon, parentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateRoleDTO} createRoleDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public adminControllerCreateRole(createRoleDTO: CreateRoleDTO, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerCreateRole(createRoleDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a new setting
     * @param {CreateSettingDTO} createSettingDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public adminControllerCreateSetting(createSettingDTO: CreateSettingDTO, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerCreateSetting(createSettingDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateUserDTO} createUserDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public adminControllerCreateUserswithRole(createUserDTO: CreateUserDTO, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerCreateUserswithRole(createUserDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public adminControllerDeleteResource(id: string, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerDeleteResource(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public adminControllerDeleteRole(id: string, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerDeleteRole(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary It will delete the setting
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public adminControllerDeleteSettings(id: string, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerDeleteSettings(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {boolean} [isParent] Filter resources by is_parent (true/false)
     * @param {boolean} [menuChild] Filter resources by menu_child (true/false)
     * @param {boolean} [interfaceChild] Filter resources by interface_child (true/false)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public adminControllerFindAllResources(isParent?: boolean, menuChild?: boolean, interfaceChild?: boolean, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerFindAllResources(isParent, menuChild, interfaceChild, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public adminControllerFindAllRoles(options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerFindAllRoles(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public adminControllerFindOneResource(id: string, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerFindOneResource(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public adminControllerFindOneRole(id: string, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerFindOneRole(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary This enpoint will fetch permissions of role on specific resource on the basis of role_id and resource_id
     * @param {string} roleId 
     * @param {string} resourceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public adminControllerFindPermissionsOfResource(roleId: string, resourceId: string, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerFindPermissionsOfResource(roleId, resourceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary This enpoint will fetch permissions assigned to role
     * @param {string} roleId 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public adminControllerFindPermissionsToRole(roleId: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerFindPermissionsToRole(roleId, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get user roles by user ID
     * @param {string} userId ID of the user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public adminControllerFindUserRoles(userId: string, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerFindUserRoles(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Fetch list of all setting
     * @param {number} limit 
     * @param {number} offset 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public adminControllerGetAllSettings(limit: number, offset: number, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerGetAllSettings(limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public adminControllerGetParentAndChildResourcesByRole(options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerGetParentAndChildResourcesByRole(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Fetch a setting by ID
     * @param {string} id UUID of the setting
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public adminControllerGetSettingById(id: string, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerGetSettingById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Fetch list of all setting by category
     * @param {number} limit 
     * @param {number} offset 
     * @param {string} category 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public adminControllerGetSettingsByCategory(limit: number, offset: number, category: string, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerGetSettingsByCategory(limit, offset, category, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary It will update the setting status
     * @param {string} id 
     * @param {UpdateStatusDTO} updateStatusDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public adminControllerSwitchSettingStatus(id: string, updateStatusDTO: UpdateStatusDTO, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerSwitchSettingStatus(id, updateStatusDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary This enpoint will update permissions to role on specific resource on the basis of role_id and resource_id
     * @param {string} roleId 
     * @param {string} resourceId 
     * @param {UpdatePermissionDto} updatePermissionDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public adminControllerUpdatePermission(roleId: string, resourceId: string, updatePermissionDto: UpdatePermissionDto, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerUpdatePermission(roleId, resourceId, updatePermissionDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {string} [identifier] Resource Identifier
     * @param {string} [label] Name for the resource
     * @param {string} [description] Description for the resource
     * @param {boolean} [isParent] Indicates if this resource is a parent resource
     * @param {boolean} [menuChild] Indicates if this resource is a menu child
     * @param {boolean} [interfaceChild] Indicates if this resource is an interface child
     * @param {number} [sortIndex] Index for sorting resources
     * @param {string} [route] Route for the resource
     * @param {File} [icon] Icon file associated with the resource
     * @param {File} [activeIcon] Active icon file associated with the resource
     * @param {string} [parentId] ID of the parent resource if this resource is a child
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public adminControllerUpdateResource(id: string, identifier?: string, label?: string, description?: string, isParent?: boolean, menuChild?: boolean, interfaceChild?: boolean, sortIndex?: number, route?: string, icon?: File, activeIcon?: File, parentId?: string, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerUpdateResource(id, identifier, label, description, isParent, menuChild, interfaceChild, sortIndex, route, icon, activeIcon, parentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {UpdateRoleDTO} updateRoleDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public adminControllerUpdateRole(id: string, updateRoleDTO: UpdateRoleDTO, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerUpdateRole(id, updateRoleDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary It will update the setting
     * @param {string} id 
     * @param {UpdateSettingDTO} updateSettingDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public adminControllerUpdateSettings(id: string, updateSettingDTO: UpdateSettingDTO, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerUpdateSettings(id, updateSettingDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary This enpoint will Update user roles
     * @param {string} userId ID of the user to update roles for
     * @param {UpdateUserRoleDTO} updateUserRoleDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public adminControllerUpdateUserRoles(userId: string, updateUserRoleDTO: UpdateUserRoleDTO, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerUpdateUserRoles(userId, updateUserRoleDTO, options).then((request) => request(this.axios, this.basePath));
    }
}

