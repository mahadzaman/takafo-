/* tslint:disable */
/* eslint-disable */
/**
 * Takafo+
 * The Takafo API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CreatePrescreenQuestionDto } from '../models';
// @ts-ignore
import type { UpdatePrescreenQuestionDto } from '../models';
/**
 * PrescreenQuestionsApi - axios parameter creator
 * @export
 */
export const PrescreenQuestionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreatePrescreenQuestionDto} createPrescreenQuestionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsControllerCreatePrescreenQuestions: async (createPrescreenQuestionDto: CreatePrescreenQuestionDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createPrescreenQuestionDto' is not null or undefined
            assertParamExists('jobsControllerCreatePrescreenQuestions', 'createPrescreenQuestionDto', createPrescreenQuestionDto)
            const localVarPath = `/v1/jobs/prescreen-questions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createPrescreenQuestionDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} jobId 
         * @param {string} questionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsControllerDeletePrescreenQuestion: async (jobId: string, questionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobId' is not null or undefined
            assertParamExists('jobsControllerDeletePrescreenQuestion', 'jobId', jobId)
            // verify required parameter 'questionId' is not null or undefined
            assertParamExists('jobsControllerDeletePrescreenQuestion', 'questionId', questionId)
            const localVarPath = `/v1/jobs/prescreen-questions/{job_id}/{question_id}`
                .replace(`{${"job_id"}}`, encodeURIComponent(String(jobId)))
                .replace(`{${"question_id"}}`, encodeURIComponent(String(questionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} jobId 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsControllerGetQuestionsByJobId: async (jobId: string, limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobId' is not null or undefined
            assertParamExists('jobsControllerGetQuestionsByJobId', 'jobId', jobId)
            const localVarPath = `/v1/jobs/prescreen-questions/{job_id}`
                .replace(`{${"job_id"}}`, encodeURIComponent(String(jobId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} jobId 
         * @param {UpdatePrescreenQuestionDto} updatePrescreenQuestionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsControllerUpdatePrescreenQuestions: async (jobId: string, updatePrescreenQuestionDto: UpdatePrescreenQuestionDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobId' is not null or undefined
            assertParamExists('jobsControllerUpdatePrescreenQuestions', 'jobId', jobId)
            // verify required parameter 'updatePrescreenQuestionDto' is not null or undefined
            assertParamExists('jobsControllerUpdatePrescreenQuestions', 'updatePrescreenQuestionDto', updatePrescreenQuestionDto)
            const localVarPath = `/v1/jobs/prescreen-questions/{job_id}`
                .replace(`{${"job_id"}}`, encodeURIComponent(String(jobId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updatePrescreenQuestionDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PrescreenQuestionsApi - functional programming interface
 * @export
 */
export const PrescreenQuestionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PrescreenQuestionsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreatePrescreenQuestionDto} createPrescreenQuestionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jobsControllerCreatePrescreenQuestions(createPrescreenQuestionDto: CreatePrescreenQuestionDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jobsControllerCreatePrescreenQuestions(createPrescreenQuestionDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PrescreenQuestionsApi.jobsControllerCreatePrescreenQuestions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} jobId 
         * @param {string} questionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jobsControllerDeletePrescreenQuestion(jobId: string, questionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jobsControllerDeletePrescreenQuestion(jobId, questionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PrescreenQuestionsApi.jobsControllerDeletePrescreenQuestion']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} jobId 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jobsControllerGetQuestionsByJobId(jobId: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jobsControllerGetQuestionsByJobId(jobId, limit, offset, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PrescreenQuestionsApi.jobsControllerGetQuestionsByJobId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} jobId 
         * @param {UpdatePrescreenQuestionDto} updatePrescreenQuestionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jobsControllerUpdatePrescreenQuestions(jobId: string, updatePrescreenQuestionDto: UpdatePrescreenQuestionDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jobsControllerUpdatePrescreenQuestions(jobId, updatePrescreenQuestionDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PrescreenQuestionsApi.jobsControllerUpdatePrescreenQuestions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PrescreenQuestionsApi - factory interface
 * @export
 */
export const PrescreenQuestionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PrescreenQuestionsApiFp(configuration)
    return {
        /**
         * 
         * @param {CreatePrescreenQuestionDto} createPrescreenQuestionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsControllerCreatePrescreenQuestions(createPrescreenQuestionDto: CreatePrescreenQuestionDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.jobsControllerCreatePrescreenQuestions(createPrescreenQuestionDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} jobId 
         * @param {string} questionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsControllerDeletePrescreenQuestion(jobId: string, questionId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.jobsControllerDeletePrescreenQuestion(jobId, questionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} jobId 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsControllerGetQuestionsByJobId(jobId: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.jobsControllerGetQuestionsByJobId(jobId, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} jobId 
         * @param {UpdatePrescreenQuestionDto} updatePrescreenQuestionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsControllerUpdatePrescreenQuestions(jobId: string, updatePrescreenQuestionDto: UpdatePrescreenQuestionDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.jobsControllerUpdatePrescreenQuestions(jobId, updatePrescreenQuestionDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PrescreenQuestionsApi - object-oriented interface
 * @export
 * @class PrescreenQuestionsApi
 * @extends {BaseAPI}
 */
export class PrescreenQuestionsApi extends BaseAPI {
    /**
     * 
     * @param {CreatePrescreenQuestionDto} createPrescreenQuestionDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrescreenQuestionsApi
     */
    public jobsControllerCreatePrescreenQuestions(createPrescreenQuestionDto: CreatePrescreenQuestionDto, options?: RawAxiosRequestConfig) {
        return PrescreenQuestionsApiFp(this.configuration).jobsControllerCreatePrescreenQuestions(createPrescreenQuestionDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} jobId 
     * @param {string} questionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrescreenQuestionsApi
     */
    public jobsControllerDeletePrescreenQuestion(jobId: string, questionId: string, options?: RawAxiosRequestConfig) {
        return PrescreenQuestionsApiFp(this.configuration).jobsControllerDeletePrescreenQuestion(jobId, questionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} jobId 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrescreenQuestionsApi
     */
    public jobsControllerGetQuestionsByJobId(jobId: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig) {
        return PrescreenQuestionsApiFp(this.configuration).jobsControllerGetQuestionsByJobId(jobId, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} jobId 
     * @param {UpdatePrescreenQuestionDto} updatePrescreenQuestionDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrescreenQuestionsApi
     */
    public jobsControllerUpdatePrescreenQuestions(jobId: string, updatePrescreenQuestionDto: UpdatePrescreenQuestionDto, options?: RawAxiosRequestConfig) {
        return PrescreenQuestionsApiFp(this.configuration).jobsControllerUpdatePrescreenQuestions(jobId, updatePrescreenQuestionDto, options).then((request) => request(this.axios, this.basePath));
    }
}

