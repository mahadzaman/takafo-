/* tslint:disable */
/* eslint-disable */
/**
 * Takafo+
 * The Takafo API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CreateProjectMilestoneDTO } from '../models';
// @ts-ignore
import type { UpdateProjectMilestoneDTO } from '../models';
/**
 * ProjectMilestonesApi - axios parameter creator
 * @export
 */
export const ProjectMilestonesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateProjectMilestoneDTO} createProjectMilestoneDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsControllerCreateProjectMilestone: async (createProjectMilestoneDTO: CreateProjectMilestoneDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createProjectMilestoneDTO' is not null or undefined
            assertParamExists('jobsControllerCreateProjectMilestone', 'createProjectMilestoneDTO', createProjectMilestoneDTO)
            const localVarPath = `/v1/jobs/project-milestone`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createProjectMilestoneDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a Project Milestone
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsControllerDeleteProjectMilestone: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('jobsControllerDeleteProjectMilestone', 'id', id)
            const localVarPath = `/v1/jobs/project-milestone/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Project Milestone by Job ID
         * @param {string} jobId ID of the job to fetch the associated Project Milestone
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsControllerFindProjectMilestoneByJobId: async (jobId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobId' is not null or undefined
            assertParamExists('jobsControllerFindProjectMilestoneByJobId', 'jobId', jobId)
            const localVarPath = `/v1/jobs/project-milestone/by-job-id/{job_id}`
                .replace(`{${"job_id"}}`, encodeURIComponent(String(jobId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsControllerGetAllProjectMilestones: async (limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/jobs/project-milestone`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsControllerGetOneProjectMilestones: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('jobsControllerGetOneProjectMilestones', 'id', id)
            const localVarPath = `/v1/jobs/project-milestone/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a Project Milestone
         * @param {string} id 
         * @param {UpdateProjectMilestoneDTO} updateProjectMilestoneDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsControllerUpdateProjectMilestone: async (id: string, updateProjectMilestoneDTO: UpdateProjectMilestoneDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('jobsControllerUpdateProjectMilestone', 'id', id)
            // verify required parameter 'updateProjectMilestoneDTO' is not null or undefined
            assertParamExists('jobsControllerUpdateProjectMilestone', 'updateProjectMilestoneDTO', updateProjectMilestoneDTO)
            const localVarPath = `/v1/jobs/project-milestone/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateProjectMilestoneDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProjectMilestonesApi - functional programming interface
 * @export
 */
export const ProjectMilestonesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProjectMilestonesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateProjectMilestoneDTO} createProjectMilestoneDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jobsControllerCreateProjectMilestone(createProjectMilestoneDTO: CreateProjectMilestoneDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jobsControllerCreateProjectMilestone(createProjectMilestoneDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectMilestonesApi.jobsControllerCreateProjectMilestone']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete a Project Milestone
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jobsControllerDeleteProjectMilestone(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jobsControllerDeleteProjectMilestone(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectMilestonesApi.jobsControllerDeleteProjectMilestone']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Project Milestone by Job ID
         * @param {string} jobId ID of the job to fetch the associated Project Milestone
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jobsControllerFindProjectMilestoneByJobId(jobId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jobsControllerFindProjectMilestoneByJobId(jobId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectMilestonesApi.jobsControllerFindProjectMilestoneByJobId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jobsControllerGetAllProjectMilestones(limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jobsControllerGetAllProjectMilestones(limit, offset, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectMilestonesApi.jobsControllerGetAllProjectMilestones']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jobsControllerGetOneProjectMilestones(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jobsControllerGetOneProjectMilestones(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectMilestonesApi.jobsControllerGetOneProjectMilestones']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update a Project Milestone
         * @param {string} id 
         * @param {UpdateProjectMilestoneDTO} updateProjectMilestoneDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jobsControllerUpdateProjectMilestone(id: string, updateProjectMilestoneDTO: UpdateProjectMilestoneDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jobsControllerUpdateProjectMilestone(id, updateProjectMilestoneDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectMilestonesApi.jobsControllerUpdateProjectMilestone']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ProjectMilestonesApi - factory interface
 * @export
 */
export const ProjectMilestonesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProjectMilestonesApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateProjectMilestoneDTO} createProjectMilestoneDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsControllerCreateProjectMilestone(createProjectMilestoneDTO: CreateProjectMilestoneDTO, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.jobsControllerCreateProjectMilestone(createProjectMilestoneDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a Project Milestone
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsControllerDeleteProjectMilestone(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.jobsControllerDeleteProjectMilestone(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Project Milestone by Job ID
         * @param {string} jobId ID of the job to fetch the associated Project Milestone
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsControllerFindProjectMilestoneByJobId(jobId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.jobsControllerFindProjectMilestoneByJobId(jobId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsControllerGetAllProjectMilestones(limit?: number, offset?: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.jobsControllerGetAllProjectMilestones(limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsControllerGetOneProjectMilestones(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.jobsControllerGetOneProjectMilestones(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a Project Milestone
         * @param {string} id 
         * @param {UpdateProjectMilestoneDTO} updateProjectMilestoneDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsControllerUpdateProjectMilestone(id: string, updateProjectMilestoneDTO: UpdateProjectMilestoneDTO, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.jobsControllerUpdateProjectMilestone(id, updateProjectMilestoneDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProjectMilestonesApi - object-oriented interface
 * @export
 * @class ProjectMilestonesApi
 * @extends {BaseAPI}
 */
export class ProjectMilestonesApi extends BaseAPI {
    /**
     * 
     * @param {CreateProjectMilestoneDTO} createProjectMilestoneDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectMilestonesApi
     */
    public jobsControllerCreateProjectMilestone(createProjectMilestoneDTO: CreateProjectMilestoneDTO, options?: RawAxiosRequestConfig) {
        return ProjectMilestonesApiFp(this.configuration).jobsControllerCreateProjectMilestone(createProjectMilestoneDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a Project Milestone
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectMilestonesApi
     */
    public jobsControllerDeleteProjectMilestone(id: string, options?: RawAxiosRequestConfig) {
        return ProjectMilestonesApiFp(this.configuration).jobsControllerDeleteProjectMilestone(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Project Milestone by Job ID
     * @param {string} jobId ID of the job to fetch the associated Project Milestone
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectMilestonesApi
     */
    public jobsControllerFindProjectMilestoneByJobId(jobId: string, options?: RawAxiosRequestConfig) {
        return ProjectMilestonesApiFp(this.configuration).jobsControllerFindProjectMilestoneByJobId(jobId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectMilestonesApi
     */
    public jobsControllerGetAllProjectMilestones(limit?: number, offset?: number, options?: RawAxiosRequestConfig) {
        return ProjectMilestonesApiFp(this.configuration).jobsControllerGetAllProjectMilestones(limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectMilestonesApi
     */
    public jobsControllerGetOneProjectMilestones(id: string, options?: RawAxiosRequestConfig) {
        return ProjectMilestonesApiFp(this.configuration).jobsControllerGetOneProjectMilestones(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a Project Milestone
     * @param {string} id 
     * @param {UpdateProjectMilestoneDTO} updateProjectMilestoneDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectMilestonesApi
     */
    public jobsControllerUpdateProjectMilestone(id: string, updateProjectMilestoneDTO: UpdateProjectMilestoneDTO, options?: RawAxiosRequestConfig) {
        return ProjectMilestonesApiFp(this.configuration).jobsControllerUpdateProjectMilestone(id, updateProjectMilestoneDTO, options).then((request) => request(this.axios, this.basePath));
    }
}

