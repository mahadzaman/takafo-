/* tslint:disable */
/* eslint-disable */
/**
 * Takafo+
 * The Takafo API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CreateJobCategoryDTO } from '../models';
// @ts-ignore
import type { UpdateJobCategoryDTO } from '../models';
/**
 * JobCategoryApi - axios parameter creator
 * @export
 */
export const JobCategoryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateJobCategoryDTO} createJobCategoryDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsControllerCreateJobCategory: async (createJobCategoryDTO: CreateJobCategoryDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createJobCategoryDTO' is not null or undefined
            assertParamExists('jobsControllerCreateJobCategory', 'createJobCategoryDTO', createJobCategoryDTO)
            const localVarPath = `/v1/jobs/category`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createJobCategoryDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsControllerDeleteJobCategory: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('jobsControllerDeleteJobCategory', 'id', id)
            const localVarPath = `/v1/jobs/category/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} limit 
         * @param {number} offset 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsControllerFindAllJobCategories: async (limit: number, offset: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'limit' is not null or undefined
            assertParamExists('jobsControllerFindAllJobCategories', 'limit', limit)
            // verify required parameter 'offset' is not null or undefined
            assertParamExists('jobsControllerFindAllJobCategories', 'offset', offset)
            const localVarPath = `/v1/jobs/category`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsControllerFindOneJobCategory: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('jobsControllerFindOneJobCategory', 'id', id)
            const localVarPath = `/v1/jobs/category/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateJobCategoryDTO} updateJobCategoryDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsControllerUpdateJobCategory: async (id: string, updateJobCategoryDTO: UpdateJobCategoryDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('jobsControllerUpdateJobCategory', 'id', id)
            // verify required parameter 'updateJobCategoryDTO' is not null or undefined
            assertParamExists('jobsControllerUpdateJobCategory', 'updateJobCategoryDTO', updateJobCategoryDTO)
            const localVarPath = `/v1/jobs/category/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateJobCategoryDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * JobCategoryApi - functional programming interface
 * @export
 */
export const JobCategoryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = JobCategoryApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateJobCategoryDTO} createJobCategoryDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jobsControllerCreateJobCategory(createJobCategoryDTO: CreateJobCategoryDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jobsControllerCreateJobCategory(createJobCategoryDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['JobCategoryApi.jobsControllerCreateJobCategory']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jobsControllerDeleteJobCategory(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jobsControllerDeleteJobCategory(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['JobCategoryApi.jobsControllerDeleteJobCategory']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} limit 
         * @param {number} offset 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jobsControllerFindAllJobCategories(limit: number, offset: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jobsControllerFindAllJobCategories(limit, offset, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['JobCategoryApi.jobsControllerFindAllJobCategories']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jobsControllerFindOneJobCategory(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jobsControllerFindOneJobCategory(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['JobCategoryApi.jobsControllerFindOneJobCategory']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateJobCategoryDTO} updateJobCategoryDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jobsControllerUpdateJobCategory(id: string, updateJobCategoryDTO: UpdateJobCategoryDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jobsControllerUpdateJobCategory(id, updateJobCategoryDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['JobCategoryApi.jobsControllerUpdateJobCategory']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * JobCategoryApi - factory interface
 * @export
 */
export const JobCategoryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = JobCategoryApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateJobCategoryDTO} createJobCategoryDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsControllerCreateJobCategory(createJobCategoryDTO: CreateJobCategoryDTO, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.jobsControllerCreateJobCategory(createJobCategoryDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsControllerDeleteJobCategory(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.jobsControllerDeleteJobCategory(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} limit 
         * @param {number} offset 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsControllerFindAllJobCategories(limit: number, offset: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.jobsControllerFindAllJobCategories(limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsControllerFindOneJobCategory(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.jobsControllerFindOneJobCategory(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateJobCategoryDTO} updateJobCategoryDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsControllerUpdateJobCategory(id: string, updateJobCategoryDTO: UpdateJobCategoryDTO, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.jobsControllerUpdateJobCategory(id, updateJobCategoryDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * JobCategoryApi - object-oriented interface
 * @export
 * @class JobCategoryApi
 * @extends {BaseAPI}
 */
export class JobCategoryApi extends BaseAPI {
    /**
     * 
     * @param {CreateJobCategoryDTO} createJobCategoryDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobCategoryApi
     */
    public jobsControllerCreateJobCategory(createJobCategoryDTO: CreateJobCategoryDTO, options?: RawAxiosRequestConfig) {
        return JobCategoryApiFp(this.configuration).jobsControllerCreateJobCategory(createJobCategoryDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobCategoryApi
     */
    public jobsControllerDeleteJobCategory(id: string, options?: RawAxiosRequestConfig) {
        return JobCategoryApiFp(this.configuration).jobsControllerDeleteJobCategory(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} limit 
     * @param {number} offset 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobCategoryApi
     */
    public jobsControllerFindAllJobCategories(limit: number, offset: number, options?: RawAxiosRequestConfig) {
        return JobCategoryApiFp(this.configuration).jobsControllerFindAllJobCategories(limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobCategoryApi
     */
    public jobsControllerFindOneJobCategory(id: string, options?: RawAxiosRequestConfig) {
        return JobCategoryApiFp(this.configuration).jobsControllerFindOneJobCategory(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {UpdateJobCategoryDTO} updateJobCategoryDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobCategoryApi
     */
    public jobsControllerUpdateJobCategory(id: string, updateJobCategoryDTO: UpdateJobCategoryDTO, options?: RawAxiosRequestConfig) {
        return JobCategoryApiFp(this.configuration).jobsControllerUpdateJobCategory(id, updateJobCategoryDTO, options).then((request) => request(this.axios, this.basePath));
    }
}

