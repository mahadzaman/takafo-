/* tslint:disable */
/* eslint-disable */
/**
 * Takafo+
 * The Takafo API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ForgotPasswordDTO } from '../models';
// @ts-ignore
import type { ResendOtpDTO } from '../models';
// @ts-ignore
import type { ResetPasswordDTO } from '../models';
/**
 * ApplicantsApi - axios parameter creator
 * @export
 */
export const ApplicantsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applicantsControllerApplicantOnboarding: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/applicants/onboarding`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new interaction for applicant
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applicantsControllerCreateInteraction: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/applicants/interaction`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Will dislike the interaction for the applicant
         * @param {string} entityId 
         * @param {string} interactionType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applicantsControllerDislikeJob: async (entityId: string, interactionType: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'entityId' is not null or undefined
            assertParamExists('applicantsControllerDislikeJob', 'entityId', entityId)
            // verify required parameter 'interactionType' is not null or undefined
            assertParamExists('applicantsControllerDislikeJob', 'interactionType', interactionType)
            const localVarPath = `/v1/applicants/interaction/{id}`
                .replace(`{${"entity_id"}}`, encodeURIComponent(String(entityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (interactionType !== undefined) {
                localVarQueryParameter['interaction_type'] = interactionType;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applicantsControllerFindCandidate: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/applicants/details`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ForgotPasswordDTO} forgotPasswordDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applicantsControllerForgorPassword: async (forgotPasswordDTO: ForgotPasswordDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'forgotPasswordDTO' is not null or undefined
            assertParamExists('applicantsControllerForgorPassword', 'forgotPasswordDTO', forgotPasswordDTO)
            const localVarPath = `/v1/applicants/forgot-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(forgotPasswordDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Fetch interactions (e.g., liked jobs) for the applicant
         * @param {string} [interactionType] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applicantsControllerGetJobInteractions: async (interactionType?: string, limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/applicants/interaction`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (interactionType !== undefined) {
                localVarQueryParameter['interaction_type'] = interactionType;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applicantsControllerLogin: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/applicants/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applicantsControllerLogout: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/applicants/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applicantsControllerRegisterApplicant: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/applicants`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ResendOtpDTO} resendOtpDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applicantsControllerResendOTP: async (resendOtpDTO: ResendOtpDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'resendOtpDTO' is not null or undefined
            assertParamExists('applicantsControllerResendOTP', 'resendOtpDTO', resendOtpDTO)
            const localVarPath = `/v1/applicants/resend-otp`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(resendOtpDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ResetPasswordDTO} resetPasswordDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applicantsControllerResetPassword: async (resetPasswordDTO: ResetPasswordDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'resetPasswordDTO' is not null or undefined
            assertParamExists('applicantsControllerResetPassword', 'resetPasswordDTO', resetPasswordDTO)
            const localVarPath = `/v1/applicants/reset-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(resetPasswordDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} otp 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applicantsControllerVerifyEmail: async (otp: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'otp' is not null or undefined
            assertParamExists('applicantsControllerVerifyEmail', 'otp', otp)
            const localVarPath = `/v1/applicants/verify-email`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (otp !== undefined) {
                localVarQueryParameter['otp'] = otp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} otp 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applicantsControllerVerifyOTP: async (otp: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'otp' is not null or undefined
            assertParamExists('applicantsControllerVerifyOTP', 'otp', otp)
            const localVarPath = `/v1/applicants/verify-otp`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (otp !== undefined) {
                localVarQueryParameter['otp'] = otp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ApplicantsApi - functional programming interface
 * @export
 */
export const ApplicantsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ApplicantsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async applicantsControllerApplicantOnboarding(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.applicantsControllerApplicantOnboarding(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApplicantsApi.applicantsControllerApplicantOnboarding']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create a new interaction for applicant
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async applicantsControllerCreateInteraction(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.applicantsControllerCreateInteraction(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApplicantsApi.applicantsControllerCreateInteraction']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Will dislike the interaction for the applicant
         * @param {string} entityId 
         * @param {string} interactionType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async applicantsControllerDislikeJob(entityId: string, interactionType: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.applicantsControllerDislikeJob(entityId, interactionType, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApplicantsApi.applicantsControllerDislikeJob']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async applicantsControllerFindCandidate(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.applicantsControllerFindCandidate(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApplicantsApi.applicantsControllerFindCandidate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ForgotPasswordDTO} forgotPasswordDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async applicantsControllerForgorPassword(forgotPasswordDTO: ForgotPasswordDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.applicantsControllerForgorPassword(forgotPasswordDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApplicantsApi.applicantsControllerForgorPassword']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Fetch interactions (e.g., liked jobs) for the applicant
         * @param {string} [interactionType] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async applicantsControllerGetJobInteractions(interactionType?: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.applicantsControllerGetJobInteractions(interactionType, limit, offset, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApplicantsApi.applicantsControllerGetJobInteractions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async applicantsControllerLogin(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.applicantsControllerLogin(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApplicantsApi.applicantsControllerLogin']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async applicantsControllerLogout(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.applicantsControllerLogout(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApplicantsApi.applicantsControllerLogout']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async applicantsControllerRegisterApplicant(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.applicantsControllerRegisterApplicant(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApplicantsApi.applicantsControllerRegisterApplicant']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ResendOtpDTO} resendOtpDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async applicantsControllerResendOTP(resendOtpDTO: ResendOtpDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.applicantsControllerResendOTP(resendOtpDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApplicantsApi.applicantsControllerResendOTP']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ResetPasswordDTO} resetPasswordDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async applicantsControllerResetPassword(resetPasswordDTO: ResetPasswordDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.applicantsControllerResetPassword(resetPasswordDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApplicantsApi.applicantsControllerResetPassword']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} otp 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async applicantsControllerVerifyEmail(otp: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.applicantsControllerVerifyEmail(otp, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApplicantsApi.applicantsControllerVerifyEmail']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} otp 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async applicantsControllerVerifyOTP(otp: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.applicantsControllerVerifyOTP(otp, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApplicantsApi.applicantsControllerVerifyOTP']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ApplicantsApi - factory interface
 * @export
 */
export const ApplicantsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ApplicantsApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applicantsControllerApplicantOnboarding(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.applicantsControllerApplicantOnboarding(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a new interaction for applicant
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applicantsControllerCreateInteraction(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.applicantsControllerCreateInteraction(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Will dislike the interaction for the applicant
         * @param {string} entityId 
         * @param {string} interactionType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applicantsControllerDislikeJob(entityId: string, interactionType: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.applicantsControllerDislikeJob(entityId, interactionType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applicantsControllerFindCandidate(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.applicantsControllerFindCandidate(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ForgotPasswordDTO} forgotPasswordDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applicantsControllerForgorPassword(forgotPasswordDTO: ForgotPasswordDTO, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.applicantsControllerForgorPassword(forgotPasswordDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Fetch interactions (e.g., liked jobs) for the applicant
         * @param {string} [interactionType] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applicantsControllerGetJobInteractions(interactionType?: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.applicantsControllerGetJobInteractions(interactionType, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applicantsControllerLogin(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.applicantsControllerLogin(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applicantsControllerLogout(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.applicantsControllerLogout(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applicantsControllerRegisterApplicant(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.applicantsControllerRegisterApplicant(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ResendOtpDTO} resendOtpDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applicantsControllerResendOTP(resendOtpDTO: ResendOtpDTO, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.applicantsControllerResendOTP(resendOtpDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ResetPasswordDTO} resetPasswordDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applicantsControllerResetPassword(resetPasswordDTO: ResetPasswordDTO, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.applicantsControllerResetPassword(resetPasswordDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} otp 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applicantsControllerVerifyEmail(otp: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.applicantsControllerVerifyEmail(otp, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} otp 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applicantsControllerVerifyOTP(otp: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.applicantsControllerVerifyOTP(otp, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ApplicantsApi - object-oriented interface
 * @export
 * @class ApplicantsApi
 * @extends {BaseAPI}
 */
export class ApplicantsApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicantsApi
     */
    public applicantsControllerApplicantOnboarding(options?: RawAxiosRequestConfig) {
        return ApplicantsApiFp(this.configuration).applicantsControllerApplicantOnboarding(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a new interaction for applicant
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicantsApi
     */
    public applicantsControllerCreateInteraction(options?: RawAxiosRequestConfig) {
        return ApplicantsApiFp(this.configuration).applicantsControllerCreateInteraction(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Will dislike the interaction for the applicant
     * @param {string} entityId 
     * @param {string} interactionType 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicantsApi
     */
    public applicantsControllerDislikeJob(entityId: string, interactionType: string, options?: RawAxiosRequestConfig) {
        return ApplicantsApiFp(this.configuration).applicantsControllerDislikeJob(entityId, interactionType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicantsApi
     */
    public applicantsControllerFindCandidate(options?: RawAxiosRequestConfig) {
        return ApplicantsApiFp(this.configuration).applicantsControllerFindCandidate(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ForgotPasswordDTO} forgotPasswordDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicantsApi
     */
    public applicantsControllerForgorPassword(forgotPasswordDTO: ForgotPasswordDTO, options?: RawAxiosRequestConfig) {
        return ApplicantsApiFp(this.configuration).applicantsControllerForgorPassword(forgotPasswordDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Fetch interactions (e.g., liked jobs) for the applicant
     * @param {string} [interactionType] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicantsApi
     */
    public applicantsControllerGetJobInteractions(interactionType?: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig) {
        return ApplicantsApiFp(this.configuration).applicantsControllerGetJobInteractions(interactionType, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicantsApi
     */
    public applicantsControllerLogin(options?: RawAxiosRequestConfig) {
        return ApplicantsApiFp(this.configuration).applicantsControllerLogin(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicantsApi
     */
    public applicantsControllerLogout(options?: RawAxiosRequestConfig) {
        return ApplicantsApiFp(this.configuration).applicantsControllerLogout(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicantsApi
     */
    public applicantsControllerRegisterApplicant(options?: RawAxiosRequestConfig) {
        return ApplicantsApiFp(this.configuration).applicantsControllerRegisterApplicant(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ResendOtpDTO} resendOtpDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicantsApi
     */
    public applicantsControllerResendOTP(resendOtpDTO: ResendOtpDTO, options?: RawAxiosRequestConfig) {
        return ApplicantsApiFp(this.configuration).applicantsControllerResendOTP(resendOtpDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ResetPasswordDTO} resetPasswordDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicantsApi
     */
    public applicantsControllerResetPassword(resetPasswordDTO: ResetPasswordDTO, options?: RawAxiosRequestConfig) {
        return ApplicantsApiFp(this.configuration).applicantsControllerResetPassword(resetPasswordDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} otp 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicantsApi
     */
    public applicantsControllerVerifyEmail(otp: number, options?: RawAxiosRequestConfig) {
        return ApplicantsApiFp(this.configuration).applicantsControllerVerifyEmail(otp, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} otp 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicantsApi
     */
    public applicantsControllerVerifyOTP(otp: number, options?: RawAxiosRequestConfig) {
        return ApplicantsApiFp(this.configuration).applicantsControllerVerifyOTP(otp, options).then((request) => request(this.axios, this.basePath));
    }
}

