/* tslint:disable */
/* eslint-disable */
/**
 * Takafo+
 * The Takafo API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { UpdateJobApplicationStatusDto } from '../models';
/**
 * JobApplicationsApi - axios parameter creator
 * @export
 */
export const JobApplicationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Will get the list of Status history of an applicant on that Job Application
         * @param {string} jobApplicationId 
         * @param {number} limit 
         * @param {number} offset 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobApplicantionsControllerApplicantStatusHistory: async (jobApplicationId: string, limit: number, offset: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobApplicationId' is not null or undefined
            assertParamExists('jobApplicantionsControllerApplicantStatusHistory', 'jobApplicationId', jobApplicationId)
            // verify required parameter 'limit' is not null or undefined
            assertParamExists('jobApplicantionsControllerApplicantStatusHistory', 'limit', limit)
            // verify required parameter 'offset' is not null or undefined
            assertParamExists('jobApplicantionsControllerApplicantStatusHistory', 'offset', offset)
            const localVarPath = `/v1/job-applicantions/history/{job_application_id}`
                .replace(`{${"job_application_id"}}`, encodeURIComponent(String(jobApplicationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Will get the list of Job Applictions of his Posted Job
         * @param {string} jobId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobApplicantionsControllerListOfJobApplications: async (jobId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobId' is not null or undefined
            assertParamExists('jobApplicantionsControllerListOfJobApplications', 'jobId', jobId)
            const localVarPath = `/v1/job-applicantions/{job_id}`
                .replace(`{${"job_id"}}`, encodeURIComponent(String(jobId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update job application status
         * @param {string} id 
         * @param {UpdateJobApplicationStatusDto} updateJobApplicationStatusDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobApplicantionsControllerUpdateStatus: async (id: string, updateJobApplicationStatusDto: UpdateJobApplicationStatusDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('jobApplicantionsControllerUpdateStatus', 'id', id)
            // verify required parameter 'updateJobApplicationStatusDto' is not null or undefined
            assertParamExists('jobApplicantionsControllerUpdateStatus', 'updateJobApplicationStatusDto', updateJobApplicationStatusDto)
            const localVarPath = `/v1/job-applicantions/{id}/status`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateJobApplicationStatusDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * JobApplicationsApi - functional programming interface
 * @export
 */
export const JobApplicationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = JobApplicationsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Will get the list of Status history of an applicant on that Job Application
         * @param {string} jobApplicationId 
         * @param {number} limit 
         * @param {number} offset 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jobApplicantionsControllerApplicantStatusHistory(jobApplicationId: string, limit: number, offset: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jobApplicantionsControllerApplicantStatusHistory(jobApplicationId, limit, offset, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['JobApplicationsApi.jobApplicantionsControllerApplicantStatusHistory']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Will get the list of Job Applictions of his Posted Job
         * @param {string} jobId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jobApplicantionsControllerListOfJobApplications(jobId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jobApplicantionsControllerListOfJobApplications(jobId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['JobApplicationsApi.jobApplicantionsControllerListOfJobApplications']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update job application status
         * @param {string} id 
         * @param {UpdateJobApplicationStatusDto} updateJobApplicationStatusDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jobApplicantionsControllerUpdateStatus(id: string, updateJobApplicationStatusDto: UpdateJobApplicationStatusDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jobApplicantionsControllerUpdateStatus(id, updateJobApplicationStatusDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['JobApplicationsApi.jobApplicantionsControllerUpdateStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * JobApplicationsApi - factory interface
 * @export
 */
export const JobApplicationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = JobApplicationsApiFp(configuration)
    return {
        /**
         * 
         * @summary Will get the list of Status history of an applicant on that Job Application
         * @param {string} jobApplicationId 
         * @param {number} limit 
         * @param {number} offset 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobApplicantionsControllerApplicantStatusHistory(jobApplicationId: string, limit: number, offset: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.jobApplicantionsControllerApplicantStatusHistory(jobApplicationId, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Will get the list of Job Applictions of his Posted Job
         * @param {string} jobId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobApplicantionsControllerListOfJobApplications(jobId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.jobApplicantionsControllerListOfJobApplications(jobId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update job application status
         * @param {string} id 
         * @param {UpdateJobApplicationStatusDto} updateJobApplicationStatusDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobApplicantionsControllerUpdateStatus(id: string, updateJobApplicationStatusDto: UpdateJobApplicationStatusDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.jobApplicantionsControllerUpdateStatus(id, updateJobApplicationStatusDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * JobApplicationsApi - object-oriented interface
 * @export
 * @class JobApplicationsApi
 * @extends {BaseAPI}
 */
export class JobApplicationsApi extends BaseAPI {
    /**
     * 
     * @summary Will get the list of Status history of an applicant on that Job Application
     * @param {string} jobApplicationId 
     * @param {number} limit 
     * @param {number} offset 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobApplicationsApi
     */
    public jobApplicantionsControllerApplicantStatusHistory(jobApplicationId: string, limit: number, offset: number, options?: RawAxiosRequestConfig) {
        return JobApplicationsApiFp(this.configuration).jobApplicantionsControllerApplicantStatusHistory(jobApplicationId, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Will get the list of Job Applictions of his Posted Job
     * @param {string} jobId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobApplicationsApi
     */
    public jobApplicantionsControllerListOfJobApplications(jobId: string, options?: RawAxiosRequestConfig) {
        return JobApplicationsApiFp(this.configuration).jobApplicantionsControllerListOfJobApplications(jobId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update job application status
     * @param {string} id 
     * @param {UpdateJobApplicationStatusDto} updateJobApplicationStatusDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobApplicationsApi
     */
    public jobApplicantionsControllerUpdateStatus(id: string, updateJobApplicationStatusDto: UpdateJobApplicationStatusDto, options?: RawAxiosRequestConfig) {
        return JobApplicationsApiFp(this.configuration).jobApplicantionsControllerUpdateStatus(id, updateJobApplicationStatusDto, options).then((request) => request(this.axios, this.basePath));
    }
}

