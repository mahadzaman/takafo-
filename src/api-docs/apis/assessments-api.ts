/* tslint:disable */
/* eslint-disable */
/**
 * Takafo+
 * The Takafo API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CreateAssessmentDTO } from '../models';
// @ts-ignore
import type { UpdateAssessmentDTO } from '../models';
/**
 * AssessmentsApi - axios parameter creator
 * @export
 */
export const AssessmentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new assessment
         * @param {CreateAssessmentDTO} createAssessmentDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assessmentsControllerCreateAssessment: async (createAssessmentDTO: CreateAssessmentDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createAssessmentDTO' is not null or undefined
            assertParamExists('assessmentsControllerCreateAssessment', 'createAssessmentDTO', createAssessmentDTO)
            const localVarPath = `/v1/assessments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createAssessmentDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete an assessment
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assessmentsControllerDeleteAssessment: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('assessmentsControllerDeleteAssessment', 'id', id)
            const localVarPath = `/v1/assessments/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Find list of all assessments
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assessmentsControllerFindAllAssessments: async (limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/assessments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Find assessment on the basis of ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assessmentsControllerFindOneAssessment: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('assessmentsControllerFindOneAssessment', 'id', id)
            const localVarPath = `/v1/assessments/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update the assessment
         * @param {string} id 
         * @param {UpdateAssessmentDTO} updateAssessmentDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assessmentsControllerUpdateAssessmentDTO: async (id: string, updateAssessmentDTO: UpdateAssessmentDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('assessmentsControllerUpdateAssessmentDTO', 'id', id)
            // verify required parameter 'updateAssessmentDTO' is not null or undefined
            assertParamExists('assessmentsControllerUpdateAssessmentDTO', 'updateAssessmentDTO', updateAssessmentDTO)
            const localVarPath = `/v1/assessments/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateAssessmentDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AssessmentsApi - functional programming interface
 * @export
 */
export const AssessmentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AssessmentsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new assessment
         * @param {CreateAssessmentDTO} createAssessmentDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async assessmentsControllerCreateAssessment(createAssessmentDTO: CreateAssessmentDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.assessmentsControllerCreateAssessment(createAssessmentDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AssessmentsApi.assessmentsControllerCreateAssessment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete an assessment
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async assessmentsControllerDeleteAssessment(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.assessmentsControllerDeleteAssessment(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AssessmentsApi.assessmentsControllerDeleteAssessment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Find list of all assessments
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async assessmentsControllerFindAllAssessments(limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.assessmentsControllerFindAllAssessments(limit, offset, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AssessmentsApi.assessmentsControllerFindAllAssessments']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Find assessment on the basis of ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async assessmentsControllerFindOneAssessment(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.assessmentsControllerFindOneAssessment(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AssessmentsApi.assessmentsControllerFindOneAssessment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update the assessment
         * @param {string} id 
         * @param {UpdateAssessmentDTO} updateAssessmentDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async assessmentsControllerUpdateAssessmentDTO(id: string, updateAssessmentDTO: UpdateAssessmentDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.assessmentsControllerUpdateAssessmentDTO(id, updateAssessmentDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AssessmentsApi.assessmentsControllerUpdateAssessmentDTO']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AssessmentsApi - factory interface
 * @export
 */
export const AssessmentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AssessmentsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new assessment
         * @param {CreateAssessmentDTO} createAssessmentDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assessmentsControllerCreateAssessment(createAssessmentDTO: CreateAssessmentDTO, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.assessmentsControllerCreateAssessment(createAssessmentDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete an assessment
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assessmentsControllerDeleteAssessment(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.assessmentsControllerDeleteAssessment(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Find list of all assessments
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assessmentsControllerFindAllAssessments(limit?: number, offset?: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.assessmentsControllerFindAllAssessments(limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Find assessment on the basis of ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assessmentsControllerFindOneAssessment(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.assessmentsControllerFindOneAssessment(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update the assessment
         * @param {string} id 
         * @param {UpdateAssessmentDTO} updateAssessmentDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assessmentsControllerUpdateAssessmentDTO(id: string, updateAssessmentDTO: UpdateAssessmentDTO, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.assessmentsControllerUpdateAssessmentDTO(id, updateAssessmentDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AssessmentsApi - object-oriented interface
 * @export
 * @class AssessmentsApi
 * @extends {BaseAPI}
 */
export class AssessmentsApi extends BaseAPI {
    /**
     * 
     * @summary Create a new assessment
     * @param {CreateAssessmentDTO} createAssessmentDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssessmentsApi
     */
    public assessmentsControllerCreateAssessment(createAssessmentDTO: CreateAssessmentDTO, options?: RawAxiosRequestConfig) {
        return AssessmentsApiFp(this.configuration).assessmentsControllerCreateAssessment(createAssessmentDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete an assessment
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssessmentsApi
     */
    public assessmentsControllerDeleteAssessment(id: string, options?: RawAxiosRequestConfig) {
        return AssessmentsApiFp(this.configuration).assessmentsControllerDeleteAssessment(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Find list of all assessments
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssessmentsApi
     */
    public assessmentsControllerFindAllAssessments(limit?: number, offset?: number, options?: RawAxiosRequestConfig) {
        return AssessmentsApiFp(this.configuration).assessmentsControllerFindAllAssessments(limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Find assessment on the basis of ID
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssessmentsApi
     */
    public assessmentsControllerFindOneAssessment(id: string, options?: RawAxiosRequestConfig) {
        return AssessmentsApiFp(this.configuration).assessmentsControllerFindOneAssessment(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update the assessment
     * @param {string} id 
     * @param {UpdateAssessmentDTO} updateAssessmentDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssessmentsApi
     */
    public assessmentsControllerUpdateAssessmentDTO(id: string, updateAssessmentDTO: UpdateAssessmentDTO, options?: RawAxiosRequestConfig) {
        return AssessmentsApiFp(this.configuration).assessmentsControllerUpdateAssessmentDTO(id, updateAssessmentDTO, options).then((request) => request(this.axios, this.basePath));
    }
}

