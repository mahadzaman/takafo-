/* tslint:disable */
/* eslint-disable */
/**
 * Takafo+
 * The Takafo API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
/**
 * AssessmentPlanApi - axios parameter creator
 * @export
 */
export const AssessmentPlanApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} assessmentId The UUID of the assessment
         * @param {object} configuration Configuration for the assessment plan as JSONB
         * @param {File} caseStudy 
         * @param {string} status status
         * @param {string} [jobId] The UUID of the job associated with the assessment plan
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsControllerCreateAssessmentPlan: async (assessmentId: string, configuration: object, caseStudy: File, status: string, jobId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'assessmentId' is not null or undefined
            assertParamExists('jobsControllerCreateAssessmentPlan', 'assessmentId', assessmentId)
            // verify required parameter 'configuration' is not null or undefined
            assertParamExists('jobsControllerCreateAssessmentPlan', 'configuration', configuration)
            // verify required parameter 'caseStudy' is not null or undefined
            assertParamExists('jobsControllerCreateAssessmentPlan', 'caseStudy', caseStudy)
            // verify required parameter 'status' is not null or undefined
            assertParamExists('jobsControllerCreateAssessmentPlan', 'status', status)
            const localVarPath = `/v1/jobs/assessment-plan`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (assessmentId !== undefined) { 
                localVarFormParams.append('assessment_id', assessmentId as any);
            }
    
            if (configuration !== undefined) { 
                localVarFormParams.append('configuration', new Blob([JSON.stringify(configuration)], { type: "application/json", }));
            }
    
            if (caseStudy !== undefined) { 
                localVarFormParams.append('case_study', caseStudy as any);
            }
    
            if (jobId !== undefined) { 
                localVarFormParams.append('job_id', jobId as any);
            }
    
            if (status !== undefined) { 
                localVarFormParams.append('status', status as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete assessment plans
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsControllerDeleteOneAssessmentPlan: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('jobsControllerDeleteOneAssessmentPlan', 'id', id)
            const localVarPath = `/v1/jobs/assessment-plan/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Assessment Plan by Job ID
         * @param {string} jobId ID of the job to fetch the associated Assessment plan
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsControllerFindAssessmentPlanByJobId: async (jobId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobId' is not null or undefined
            assertParamExists('jobsControllerFindAssessmentPlanByJobId', 'jobId', jobId)
            const localVarPath = `/v1/jobs/assessment-plan/by-job-id/{job_id}`
                .replace(`{${"job_id"}}`, encodeURIComponent(String(jobId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all assessment plans
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsControllerGetAllAssessmentPlans: async (limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/jobs/assessment-plan`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Fetch assessment plan
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsControllerGetOneAssessmentPlan: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('jobsControllerGetOneAssessmentPlan', 'id', id)
            const localVarPath = `/v1/jobs/assessment-plan/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {string} status status
         * @param {string} [assessmentId] The UUID of the assessment
         * @param {object} [configuration] Configuration for the assessment plan as JSONB
         * @param {File} [caseStudy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsControllerUpdateAssessmentPlan: async (id: string, status: string, assessmentId?: string, configuration?: object, caseStudy?: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('jobsControllerUpdateAssessmentPlan', 'id', id)
            // verify required parameter 'status' is not null or undefined
            assertParamExists('jobsControllerUpdateAssessmentPlan', 'status', status)
            const localVarPath = `/v1/jobs/assessment-plan/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (assessmentId !== undefined) { 
                localVarFormParams.append('assessment_id', assessmentId as any);
            }
    
            if (configuration !== undefined) { 
                localVarFormParams.append('configuration', new Blob([JSON.stringify(configuration)], { type: "application/json", }));
            }
    
            if (caseStudy !== undefined) { 
                localVarFormParams.append('case_study', caseStudy as any);
            }
    
            if (status !== undefined) { 
                localVarFormParams.append('status', status as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AssessmentPlanApi - functional programming interface
 * @export
 */
export const AssessmentPlanApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AssessmentPlanApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} assessmentId The UUID of the assessment
         * @param {object} configuration Configuration for the assessment plan as JSONB
         * @param {File} caseStudy 
         * @param {string} status status
         * @param {string} [jobId] The UUID of the job associated with the assessment plan
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jobsControllerCreateAssessmentPlan(assessmentId: string, configuration: object, caseStudy: File, status: string, jobId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jobsControllerCreateAssessmentPlan(assessmentId, configuration, caseStudy, status, jobId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AssessmentPlanApi.jobsControllerCreateAssessmentPlan']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete assessment plans
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jobsControllerDeleteOneAssessmentPlan(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jobsControllerDeleteOneAssessmentPlan(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AssessmentPlanApi.jobsControllerDeleteOneAssessmentPlan']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Assessment Plan by Job ID
         * @param {string} jobId ID of the job to fetch the associated Assessment plan
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jobsControllerFindAssessmentPlanByJobId(jobId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jobsControllerFindAssessmentPlanByJobId(jobId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AssessmentPlanApi.jobsControllerFindAssessmentPlanByJobId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get all assessment plans
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jobsControllerGetAllAssessmentPlans(limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jobsControllerGetAllAssessmentPlans(limit, offset, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AssessmentPlanApi.jobsControllerGetAllAssessmentPlans']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Fetch assessment plan
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jobsControllerGetOneAssessmentPlan(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jobsControllerGetOneAssessmentPlan(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AssessmentPlanApi.jobsControllerGetOneAssessmentPlan']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {string} status status
         * @param {string} [assessmentId] The UUID of the assessment
         * @param {object} [configuration] Configuration for the assessment plan as JSONB
         * @param {File} [caseStudy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jobsControllerUpdateAssessmentPlan(id: string, status: string, assessmentId?: string, configuration?: object, caseStudy?: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jobsControllerUpdateAssessmentPlan(id, status, assessmentId, configuration, caseStudy, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AssessmentPlanApi.jobsControllerUpdateAssessmentPlan']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AssessmentPlanApi - factory interface
 * @export
 */
export const AssessmentPlanApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AssessmentPlanApiFp(configuration)
    return {
        /**
         * 
         * @param {string} assessmentId The UUID of the assessment
         * @param {object} configuration Configuration for the assessment plan as JSONB
         * @param {File} caseStudy 
         * @param {string} status status
         * @param {string} [jobId] The UUID of the job associated with the assessment plan
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsControllerCreateAssessmentPlan(assessmentId: string, configuration: object, caseStudy: File, status: string, jobId?: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.jobsControllerCreateAssessmentPlan(assessmentId, configuration, caseStudy, status, jobId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete assessment plans
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsControllerDeleteOneAssessmentPlan(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.jobsControllerDeleteOneAssessmentPlan(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Assessment Plan by Job ID
         * @param {string} jobId ID of the job to fetch the associated Assessment plan
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsControllerFindAssessmentPlanByJobId(jobId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.jobsControllerFindAssessmentPlanByJobId(jobId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all assessment plans
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsControllerGetAllAssessmentPlans(limit?: number, offset?: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.jobsControllerGetAllAssessmentPlans(limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Fetch assessment plan
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsControllerGetOneAssessmentPlan(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.jobsControllerGetOneAssessmentPlan(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {string} status status
         * @param {string} [assessmentId] The UUID of the assessment
         * @param {object} [configuration] Configuration for the assessment plan as JSONB
         * @param {File} [caseStudy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsControllerUpdateAssessmentPlan(id: string, status: string, assessmentId?: string, configuration?: object, caseStudy?: File, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.jobsControllerUpdateAssessmentPlan(id, status, assessmentId, configuration, caseStudy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AssessmentPlanApi - object-oriented interface
 * @export
 * @class AssessmentPlanApi
 * @extends {BaseAPI}
 */
export class AssessmentPlanApi extends BaseAPI {
    /**
     * 
     * @param {string} assessmentId The UUID of the assessment
     * @param {object} configuration Configuration for the assessment plan as JSONB
     * @param {File} caseStudy 
     * @param {string} status status
     * @param {string} [jobId] The UUID of the job associated with the assessment plan
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssessmentPlanApi
     */
    public jobsControllerCreateAssessmentPlan(assessmentId: string, configuration: object, caseStudy: File, status: string, jobId?: string, options?: RawAxiosRequestConfig) {
        return AssessmentPlanApiFp(this.configuration).jobsControllerCreateAssessmentPlan(assessmentId, configuration, caseStudy, status, jobId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete assessment plans
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssessmentPlanApi
     */
    public jobsControllerDeleteOneAssessmentPlan(id: string, options?: RawAxiosRequestConfig) {
        return AssessmentPlanApiFp(this.configuration).jobsControllerDeleteOneAssessmentPlan(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Assessment Plan by Job ID
     * @param {string} jobId ID of the job to fetch the associated Assessment plan
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssessmentPlanApi
     */
    public jobsControllerFindAssessmentPlanByJobId(jobId: string, options?: RawAxiosRequestConfig) {
        return AssessmentPlanApiFp(this.configuration).jobsControllerFindAssessmentPlanByJobId(jobId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all assessment plans
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssessmentPlanApi
     */
    public jobsControllerGetAllAssessmentPlans(limit?: number, offset?: number, options?: RawAxiosRequestConfig) {
        return AssessmentPlanApiFp(this.configuration).jobsControllerGetAllAssessmentPlans(limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Fetch assessment plan
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssessmentPlanApi
     */
    public jobsControllerGetOneAssessmentPlan(id: string, options?: RawAxiosRequestConfig) {
        return AssessmentPlanApiFp(this.configuration).jobsControllerGetOneAssessmentPlan(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {string} status status
     * @param {string} [assessmentId] The UUID of the assessment
     * @param {object} [configuration] Configuration for the assessment plan as JSONB
     * @param {File} [caseStudy] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssessmentPlanApi
     */
    public jobsControllerUpdateAssessmentPlan(id: string, status: string, assessmentId?: string, configuration?: object, caseStudy?: File, options?: RawAxiosRequestConfig) {
        return AssessmentPlanApiFp(this.configuration).jobsControllerUpdateAssessmentPlan(id, status, assessmentId, configuration, caseStudy, options).then((request) => request(this.axios, this.basePath));
    }
}

