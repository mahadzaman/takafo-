/* tslint:disable */
/* eslint-disable */
/**
 * Takafo+
 * The Takafo API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CreateSourcingPlanDTO } from '../models';
// @ts-ignore
import type { UpdateSourcingPlanDto } from '../models';
/**
 * SourcingPlanApi - axios parameter creator
 * @export
 */
export const SourcingPlanApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateSourcingPlanDTO} createSourcingPlanDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsControllerCreateSourcingPlan: async (createSourcingPlanDTO: CreateSourcingPlanDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createSourcingPlanDTO' is not null or undefined
            assertParamExists('jobsControllerCreateSourcingPlan', 'createSourcingPlanDTO', createSourcingPlanDTO)
            const localVarPath = `/v1/jobs/sourcing-plan`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createSourcingPlanDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a Sourcing Plan
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsControllerDeleteSourcingPlan: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('jobsControllerDeleteSourcingPlan', 'id', id)
            const localVarPath = `/v1/jobs/sourcing-plan/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsControllerGetAllSourcingPlan: async (limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/jobs/sourcing-plan`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsControllerGetOneSourcingPlan: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('jobsControllerGetOneSourcingPlan', 'id', id)
            const localVarPath = `/v1/jobs/sourcing-plan/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Sourcing Plan by Job ID
         * @param {string} jobId ID of the job to fetch the associated sourcing plan
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsControllerGetSourcingPlanByJobId: async (jobId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobId' is not null or undefined
            assertParamExists('jobsControllerGetSourcingPlanByJobId', 'jobId', jobId)
            const localVarPath = `/v1/jobs/sourcing-plan/by-job-id/{job_id}`
                .replace(`{${"job_id"}}`, encodeURIComponent(String(jobId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a Sourcing Plan
         * @param {string} id 
         * @param {UpdateSourcingPlanDto} updateSourcingPlanDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsControllerUpdateSourcingPlan: async (id: string, updateSourcingPlanDto: UpdateSourcingPlanDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('jobsControllerUpdateSourcingPlan', 'id', id)
            // verify required parameter 'updateSourcingPlanDto' is not null or undefined
            assertParamExists('jobsControllerUpdateSourcingPlan', 'updateSourcingPlanDto', updateSourcingPlanDto)
            const localVarPath = `/v1/jobs/sourcing-plan/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateSourcingPlanDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SourcingPlanApi - functional programming interface
 * @export
 */
export const SourcingPlanApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SourcingPlanApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateSourcingPlanDTO} createSourcingPlanDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jobsControllerCreateSourcingPlan(createSourcingPlanDTO: CreateSourcingPlanDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jobsControllerCreateSourcingPlan(createSourcingPlanDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SourcingPlanApi.jobsControllerCreateSourcingPlan']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete a Sourcing Plan
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jobsControllerDeleteSourcingPlan(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jobsControllerDeleteSourcingPlan(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SourcingPlanApi.jobsControllerDeleteSourcingPlan']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jobsControllerGetAllSourcingPlan(limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jobsControllerGetAllSourcingPlan(limit, offset, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SourcingPlanApi.jobsControllerGetAllSourcingPlan']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jobsControllerGetOneSourcingPlan(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jobsControllerGetOneSourcingPlan(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SourcingPlanApi.jobsControllerGetOneSourcingPlan']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Sourcing Plan by Job ID
         * @param {string} jobId ID of the job to fetch the associated sourcing plan
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jobsControllerGetSourcingPlanByJobId(jobId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jobsControllerGetSourcingPlanByJobId(jobId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SourcingPlanApi.jobsControllerGetSourcingPlanByJobId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update a Sourcing Plan
         * @param {string} id 
         * @param {UpdateSourcingPlanDto} updateSourcingPlanDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jobsControllerUpdateSourcingPlan(id: string, updateSourcingPlanDto: UpdateSourcingPlanDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jobsControllerUpdateSourcingPlan(id, updateSourcingPlanDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SourcingPlanApi.jobsControllerUpdateSourcingPlan']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SourcingPlanApi - factory interface
 * @export
 */
export const SourcingPlanApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SourcingPlanApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateSourcingPlanDTO} createSourcingPlanDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsControllerCreateSourcingPlan(createSourcingPlanDTO: CreateSourcingPlanDTO, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.jobsControllerCreateSourcingPlan(createSourcingPlanDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a Sourcing Plan
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsControllerDeleteSourcingPlan(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.jobsControllerDeleteSourcingPlan(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsControllerGetAllSourcingPlan(limit?: number, offset?: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.jobsControllerGetAllSourcingPlan(limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsControllerGetOneSourcingPlan(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.jobsControllerGetOneSourcingPlan(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Sourcing Plan by Job ID
         * @param {string} jobId ID of the job to fetch the associated sourcing plan
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsControllerGetSourcingPlanByJobId(jobId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.jobsControllerGetSourcingPlanByJobId(jobId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a Sourcing Plan
         * @param {string} id 
         * @param {UpdateSourcingPlanDto} updateSourcingPlanDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsControllerUpdateSourcingPlan(id: string, updateSourcingPlanDto: UpdateSourcingPlanDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.jobsControllerUpdateSourcingPlan(id, updateSourcingPlanDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SourcingPlanApi - object-oriented interface
 * @export
 * @class SourcingPlanApi
 * @extends {BaseAPI}
 */
export class SourcingPlanApi extends BaseAPI {
    /**
     * 
     * @param {CreateSourcingPlanDTO} createSourcingPlanDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcingPlanApi
     */
    public jobsControllerCreateSourcingPlan(createSourcingPlanDTO: CreateSourcingPlanDTO, options?: RawAxiosRequestConfig) {
        return SourcingPlanApiFp(this.configuration).jobsControllerCreateSourcingPlan(createSourcingPlanDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a Sourcing Plan
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcingPlanApi
     */
    public jobsControllerDeleteSourcingPlan(id: string, options?: RawAxiosRequestConfig) {
        return SourcingPlanApiFp(this.configuration).jobsControllerDeleteSourcingPlan(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcingPlanApi
     */
    public jobsControllerGetAllSourcingPlan(limit?: number, offset?: number, options?: RawAxiosRequestConfig) {
        return SourcingPlanApiFp(this.configuration).jobsControllerGetAllSourcingPlan(limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcingPlanApi
     */
    public jobsControllerGetOneSourcingPlan(id: string, options?: RawAxiosRequestConfig) {
        return SourcingPlanApiFp(this.configuration).jobsControllerGetOneSourcingPlan(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Sourcing Plan by Job ID
     * @param {string} jobId ID of the job to fetch the associated sourcing plan
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcingPlanApi
     */
    public jobsControllerGetSourcingPlanByJobId(jobId: string, options?: RawAxiosRequestConfig) {
        return SourcingPlanApiFp(this.configuration).jobsControllerGetSourcingPlanByJobId(jobId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a Sourcing Plan
     * @param {string} id 
     * @param {UpdateSourcingPlanDto} updateSourcingPlanDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcingPlanApi
     */
    public jobsControllerUpdateSourcingPlan(id: string, updateSourcingPlanDto: UpdateSourcingPlanDto, options?: RawAxiosRequestConfig) {
        return SourcingPlanApiFp(this.configuration).jobsControllerUpdateSourcingPlan(id, updateSourcingPlanDto, options).then((request) => request(this.axios, this.basePath));
    }
}

