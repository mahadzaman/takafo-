/* tslint:disable */
/* eslint-disable */
/**
 * Takafo+
 * The Takafo API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CreateQuestionDto } from '../models';
// @ts-ignore
import type { UpdateQuestionDto } from '../models';
/**
 * QuestionsApi - axios parameter creator
 * @export
 */
export const QuestionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new question
         * @param {CreateQuestionDto} createQuestionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        questionsControllerCreateQuestion: async (createQuestionDto: CreateQuestionDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createQuestionDto' is not null or undefined
            assertParamExists('questionsControllerCreateQuestion', 'createQuestionDto', createQuestionDto)
            const localVarPath = `/v1/questions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createQuestionDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete the question with id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        questionsControllerDeleteQuestionById: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('questionsControllerDeleteQuestionById', 'id', id)
            const localVarPath = `/v1/questions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Fetch all questions
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {boolean} [isPreset] 
         * @param {string} [questionTag] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        questionsControllerGetAllQuestions: async (limit?: number, offset?: number, isPreset?: boolean, questionTag?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/questions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (isPreset !== undefined) {
                localVarQueryParameter['is_preset'] = isPreset;
            }

            if (questionTag !== undefined) {
                localVarQueryParameter['question_tag'] = questionTag;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Fetch the question with id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        questionsControllerGetQuestionById: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('questionsControllerGetQuestionById', 'id', id)
            const localVarPath = `/v1/questions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update the qiestion
         * @param {string} id 
         * @param {UpdateQuestionDto} updateQuestionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        questionsControllerUpdateQuestion: async (id: string, updateQuestionDto: UpdateQuestionDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('questionsControllerUpdateQuestion', 'id', id)
            // verify required parameter 'updateQuestionDto' is not null or undefined
            assertParamExists('questionsControllerUpdateQuestion', 'updateQuestionDto', updateQuestionDto)
            const localVarPath = `/v1/questions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateQuestionDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * QuestionsApi - functional programming interface
 * @export
 */
export const QuestionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = QuestionsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new question
         * @param {CreateQuestionDto} createQuestionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async questionsControllerCreateQuestion(createQuestionDto: CreateQuestionDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.questionsControllerCreateQuestion(createQuestionDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QuestionsApi.questionsControllerCreateQuestion']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete the question with id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async questionsControllerDeleteQuestionById(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.questionsControllerDeleteQuestionById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QuestionsApi.questionsControllerDeleteQuestionById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Fetch all questions
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {boolean} [isPreset] 
         * @param {string} [questionTag] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async questionsControllerGetAllQuestions(limit?: number, offset?: number, isPreset?: boolean, questionTag?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.questionsControllerGetAllQuestions(limit, offset, isPreset, questionTag, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QuestionsApi.questionsControllerGetAllQuestions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Fetch the question with id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async questionsControllerGetQuestionById(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.questionsControllerGetQuestionById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QuestionsApi.questionsControllerGetQuestionById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update the qiestion
         * @param {string} id 
         * @param {UpdateQuestionDto} updateQuestionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async questionsControllerUpdateQuestion(id: string, updateQuestionDto: UpdateQuestionDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.questionsControllerUpdateQuestion(id, updateQuestionDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QuestionsApi.questionsControllerUpdateQuestion']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * QuestionsApi - factory interface
 * @export
 */
export const QuestionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = QuestionsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new question
         * @param {CreateQuestionDto} createQuestionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        questionsControllerCreateQuestion(createQuestionDto: CreateQuestionDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.questionsControllerCreateQuestion(createQuestionDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete the question with id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        questionsControllerDeleteQuestionById(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.questionsControllerDeleteQuestionById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Fetch all questions
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {boolean} [isPreset] 
         * @param {string} [questionTag] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        questionsControllerGetAllQuestions(limit?: number, offset?: number, isPreset?: boolean, questionTag?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.questionsControllerGetAllQuestions(limit, offset, isPreset, questionTag, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Fetch the question with id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        questionsControllerGetQuestionById(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.questionsControllerGetQuestionById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update the qiestion
         * @param {string} id 
         * @param {UpdateQuestionDto} updateQuestionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        questionsControllerUpdateQuestion(id: string, updateQuestionDto: UpdateQuestionDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.questionsControllerUpdateQuestion(id, updateQuestionDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * QuestionsApi - object-oriented interface
 * @export
 * @class QuestionsApi
 * @extends {BaseAPI}
 */
export class QuestionsApi extends BaseAPI {
    /**
     * 
     * @summary Create a new question
     * @param {CreateQuestionDto} createQuestionDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionsApi
     */
    public questionsControllerCreateQuestion(createQuestionDto: CreateQuestionDto, options?: RawAxiosRequestConfig) {
        return QuestionsApiFp(this.configuration).questionsControllerCreateQuestion(createQuestionDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete the question with id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionsApi
     */
    public questionsControllerDeleteQuestionById(id: string, options?: RawAxiosRequestConfig) {
        return QuestionsApiFp(this.configuration).questionsControllerDeleteQuestionById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Fetch all questions
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {boolean} [isPreset] 
     * @param {string} [questionTag] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionsApi
     */
    public questionsControllerGetAllQuestions(limit?: number, offset?: number, isPreset?: boolean, questionTag?: string, options?: RawAxiosRequestConfig) {
        return QuestionsApiFp(this.configuration).questionsControllerGetAllQuestions(limit, offset, isPreset, questionTag, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Fetch the question with id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionsApi
     */
    public questionsControllerGetQuestionById(id: string, options?: RawAxiosRequestConfig) {
        return QuestionsApiFp(this.configuration).questionsControllerGetQuestionById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update the qiestion
     * @param {string} id 
     * @param {UpdateQuestionDto} updateQuestionDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionsApi
     */
    public questionsControllerUpdateQuestion(id: string, updateQuestionDto: UpdateQuestionDto, options?: RawAxiosRequestConfig) {
        return QuestionsApiFp(this.configuration).questionsControllerUpdateQuestion(id, updateQuestionDto, options).then((request) => request(this.axios, this.basePath));
    }
}

