/* tslint:disable */
/* eslint-disable */
/**
 * Takafo+
 * The Takafo API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CreateJobApplicationDto } from '../models';
/**
 * JobApplicationsApplicantApi - axios parameter creator
 * @export
 */
export const JobApplicationsApplicantApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Apply to the job
         * @param {CreateJobApplicationDto} createJobApplicationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobApplicantionsControllerCreateJobApplicantion: async (createJobApplicationDto: CreateJobApplicationDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createJobApplicationDto' is not null or undefined
            assertParamExists('jobApplicantionsControllerCreateJobApplicantion', 'createJobApplicationDto', createJobApplicationDto)
            const localVarPath = `/v1/job-applicantions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createJobApplicationDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary   Will get the list of jobs details of applicant on the basis of status
         * @param {string} [status] Status of the job application
         * @param {number} [limit] Limit of records to fetch
         * @param {number} [offset] Offset for pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobApplicantionsControllerGetApplicantsJobsWithCount: async (status?: string, limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/job-applicantions/jobs/applicant`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Will get the list of job applications of applicant on the basis of status
         * @param {string} [status] Status of the job application
         * @param {number} [limit] Limit of records to fetch
         * @param {number} [offset] Offset for pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobApplicantionsControllerGetApplicationsOfApplicantByStatus: async (status?: string, limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/job-applicantions/applicant/{applicant_id}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * JobApplicationsApplicantApi - functional programming interface
 * @export
 */
export const JobApplicationsApplicantApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = JobApplicationsApplicantApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Apply to the job
         * @param {CreateJobApplicationDto} createJobApplicationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jobApplicantionsControllerCreateJobApplicantion(createJobApplicationDto: CreateJobApplicationDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jobApplicantionsControllerCreateJobApplicantion(createJobApplicationDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['JobApplicationsApplicantApi.jobApplicantionsControllerCreateJobApplicantion']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary   Will get the list of jobs details of applicant on the basis of status
         * @param {string} [status] Status of the job application
         * @param {number} [limit] Limit of records to fetch
         * @param {number} [offset] Offset for pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jobApplicantionsControllerGetApplicantsJobsWithCount(status?: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jobApplicantionsControllerGetApplicantsJobsWithCount(status, limit, offset, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['JobApplicationsApplicantApi.jobApplicantionsControllerGetApplicantsJobsWithCount']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Will get the list of job applications of applicant on the basis of status
         * @param {string} [status] Status of the job application
         * @param {number} [limit] Limit of records to fetch
         * @param {number} [offset] Offset for pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jobApplicantionsControllerGetApplicationsOfApplicantByStatus(status?: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jobApplicantionsControllerGetApplicationsOfApplicantByStatus(status, limit, offset, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['JobApplicationsApplicantApi.jobApplicantionsControllerGetApplicationsOfApplicantByStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * JobApplicationsApplicantApi - factory interface
 * @export
 */
export const JobApplicationsApplicantApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = JobApplicationsApplicantApiFp(configuration)
    return {
        /**
         * 
         * @summary Apply to the job
         * @param {CreateJobApplicationDto} createJobApplicationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobApplicantionsControllerCreateJobApplicantion(createJobApplicationDto: CreateJobApplicationDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.jobApplicantionsControllerCreateJobApplicantion(createJobApplicationDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary   Will get the list of jobs details of applicant on the basis of status
         * @param {string} [status] Status of the job application
         * @param {number} [limit] Limit of records to fetch
         * @param {number} [offset] Offset for pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobApplicantionsControllerGetApplicantsJobsWithCount(status?: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.jobApplicantionsControllerGetApplicantsJobsWithCount(status, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Will get the list of job applications of applicant on the basis of status
         * @param {string} [status] Status of the job application
         * @param {number} [limit] Limit of records to fetch
         * @param {number} [offset] Offset for pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobApplicantionsControllerGetApplicationsOfApplicantByStatus(status?: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.jobApplicantionsControllerGetApplicationsOfApplicantByStatus(status, limit, offset, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * JobApplicationsApplicantApi - object-oriented interface
 * @export
 * @class JobApplicationsApplicantApi
 * @extends {BaseAPI}
 */
export class JobApplicationsApplicantApi extends BaseAPI {
    /**
     * 
     * @summary Apply to the job
     * @param {CreateJobApplicationDto} createJobApplicationDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobApplicationsApplicantApi
     */
    public jobApplicantionsControllerCreateJobApplicantion(createJobApplicationDto: CreateJobApplicationDto, options?: RawAxiosRequestConfig) {
        return JobApplicationsApplicantApiFp(this.configuration).jobApplicantionsControllerCreateJobApplicantion(createJobApplicationDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary   Will get the list of jobs details of applicant on the basis of status
     * @param {string} [status] Status of the job application
     * @param {number} [limit] Limit of records to fetch
     * @param {number} [offset] Offset for pagination
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobApplicationsApplicantApi
     */
    public jobApplicantionsControllerGetApplicantsJobsWithCount(status?: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig) {
        return JobApplicationsApplicantApiFp(this.configuration).jobApplicantionsControllerGetApplicantsJobsWithCount(status, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Will get the list of job applications of applicant on the basis of status
     * @param {string} [status] Status of the job application
     * @param {number} [limit] Limit of records to fetch
     * @param {number} [offset] Offset for pagination
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobApplicationsApplicantApi
     */
    public jobApplicantionsControllerGetApplicationsOfApplicantByStatus(status?: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig) {
        return JobApplicationsApplicantApiFp(this.configuration).jobApplicantionsControllerGetApplicationsOfApplicantByStatus(status, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }
}

